/*
 * File generated by SourceCombiner.exe using 33 source files.
 * Created On: 3/18/2024 6:55:38 PM
*/
using Battlehub.RTSaveLoad;
using MeshVR;
using MVR.FileManagementSecure;
using Random = System.Random;
using SimpleJSON;
using static VAM_Decal_Maker.PathHelper;
using System;
using System.CodeDom;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using uFileBrowser;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Experimental.PlayerLoop;
using UnityEngine.UI;
using UnityEngine.Video;
using VAM_Decal_Maker.Source.Helpers;
//*** SourceCombiner -> original file VAM_Decal_Maker.cs ***
namespace VAM_Decal_Maker
{
    public class Decal_Maker : MVRScript
    {
        private const string pluginName = "DecalMaker";
        private const string pluginVersion = "RC 11";
        //person script is attatched too
        private Atom _parentAtom; //VAM parent
        private bool _SetupFinished = false;
        private bool _SetupError = false;
        private bool _processingCharacterChange = false;
        private GpuTextureData gpuTextureData;
        private GpuTextureData oldgpuTextureData;
        public DAZCharacter _dazCharacter { get; private set; }
        private DAZCharacterSelector _dazCharacterSelector;
        private ShaderData shaderData;
        public JSONClass _savedData { get; set; }
        public static Dictionary<string, Texture2D> resourceTextures = new Dictionary<string, Texture2D>();
        public DAZMergedSkinV2 _dazSkin { get; private set; }
        //Events
        public Action OnUpDateAction;
        public Action OnDestroyAction;
        //A public event for listeners to subscribe to
        //Note that by using the generic EventHandler<T> event type
        //we do not need to declare a separate delegate type.
        public event EventHandler<PanelEventArgs> CoreEvent;
        //delegate to get saveJSON from DecalManager
        public delegate JSONArray GetJSONSaveDelegate(string MaterialSlot, string TextureSlot);
        public GetJSONSaveDelegate GetJSONDelegate;
        public bool _isMale;
        public string _uvSetName;
        //UI
        public JSONStorableBool _toggleNippleCutout;
        public JSONStorableBool _toggleGenitalCutout;
        private UIDynamicButton _resetButton;
        private UIDynamicButton _editButton;
        private UIDynamicButton _genButton;
        private UIDynamicButton _clearAllButton;
        private UIDynamicButton _prefabButton;
        private UIDynamicButton _savePresetButton;
        private UIDynamicButton _loadPresetButton;
        private UIDynamicToggle _toggleNipple;
        private UIDynamicToggle _toggleGenital;
        public HeaderPanel _headerPanel;
        //GenitalMaker _genitalMakerPanel;
        private PresetManager _appearancePresetManager;
        private JSONClass _lastLoadedAppearanceJSON = new JSONClass();
        private UserConfirmPanel userConfirmPanel;
        private Canvas UserConfirmCanvas;
        private AdjustmentPanel adjustmentPanel;
        private GenitalPanel genitalPanel;
        private readonly bool _Debug = false;
        public void ToggleGensCallBack(bool value)
        {
            OnCoreChange(this, new PanelEventArgs(EventEnum.ToggleGenitalCutout, value));
        }
        public void ToggleNipsCallBack(bool value)
        {
            OnCoreChange(this, new PanelEventArgs(EventEnum.ToggleNippleCutout, value));
        }
        public override void Init()
        {
            try
            {
                if (containingAtom.mainController == null)
                {
                    SuperController.LogError("Please add this plugin to a PERSON atom.");
                    return;
                }
                _parentAtom = containingAtom;
                _parentAtom.mainController.interactableInPlayMode = true;
                _appearancePresetManager = _parentAtom.mainPresetControl.GetComponentsInChildren<PresetManager>().Where(x => x.name == "AppearancePresets").FirstOrDefault();
                //registers DM to store with appearances
                List<PresetManager.SpecificStorable> spStore = _appearancePresetManager.specificStorables.ToList();
                PresetManager.SpecificStorable storable = new PresetManager.SpecificStorable
                {
                    specificStorableBucket = this.transform,
                    specificKey = null,
                    storeId = string.Empty,
                    isSpecificKeyAnObject = false,
                    includeChildren = false
                };
                spStore.Add(storable);
                _appearancePresetManager.specificStorables = spStore.ToArray();
                _appearancePresetManager.RefreshStorables();
                //setup all values before finishing UI
                StartCoroutine(CharacterChanged());
                StartCoroutine(MonitorLastLoadedAppearance());
                //use vam's built in loader for assets then load shader from bundle instead of smuggling them in as a unity Atom
                shaderData = new ShaderData(GetPackagePath(this) + "Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/chokpahi-decal.assetbundle");
                _clearAllButton = CreateButton("Clear Everything");
                _prefabButton = CreateButton("USE Prefab", true);
                PrefabPanel prefabPanel = new PrefabPanel(this);
                _resetButton = CreateButton("Reset Texture");
                UIDynamic spacer = CreateSpacer(true);
                spacer.height = 50;
                GridLayoutGroup glg = spacer.gameObject.AddComponent<GridLayoutGroup>();
                glg.constraint = GridLayoutGroup.Constraint.FixedColumnCount;
                glg.constraintCount = 2;
                glg.cellSize = new Vector2(250, 50);
                glg.spacing = new Vector2(20, 0);
                _editButton = UIWidgets.CreateVAMButtom(this, spacer.transform, "EDIT");
                _editButton.transform.localPosition = Vector3.zero;
                _genButton = UIWidgets.CreateVAMButtom(this, spacer.transform, "Genital");
                _genButton.transform.localPosition = Vector3.zero;
                _loadPresetButton = CreateButton("Load Preset");
                _savePresetButton = CreateButton("Save Preset", true);
                _toggleNippleCutout = new JSONStorableBool("Nipple Cutouts ON", true, new JSONStorableBool.SetBoolCallback(ToggleNipsCallBack));
                _toggleNipple = CreateToggle(_toggleNippleCutout);
                RegisterBool(_toggleNippleCutout);
                _toggleGenitalCutout = new JSONStorableBool("Genital Cutouts ON", true, new JSONStorableBool.SetBoolCallback(ToggleGensCallBack));
                _toggleGenital = CreateToggle(_toggleGenitalCutout, true);
                RegisterBool(_toggleGenitalCutout);
                JSONStorableUrl lastImagePath = new JSONStorableUrl("LastImageDir", "Custom/Atom/Person/Textures");
                RegisterUrl(lastImagePath);
                lastImagePath.isStorable = false;
                //assign listners
                _clearAllButton.button.onClick.AddListener(ResetAll);
                _prefabButton.button.onClick.AddListener(prefabPanel.OnClick);
                string presetsPath = "Custom/Scripts/Chokaphi/VAM_Decal_Maker/Presets";
                if (!FileManagerSecure.DirectoryExists(presetsPath))
                {
                    FileManagerSecure.CreateDirectory(presetsPath);
                }
                if (!FileManagerSecure.DirectoryExists(presetsPath + "/PreFabs"))
                {
                    FileManagerSecure.CreateDirectory(presetsPath + "/PreFabs");
                }
                _savePresetButton.button.onClick.AddListener(() =>
                {
                    SuperController.singleton.fileBrowserUI.defaultPath = presetsPath;
                    SuperController.singleton.fileBrowserUI.showFiles = true;
                    SuperController.singleton.fileBrowserUI.showDirs = true;
                    SuperController.singleton.fileBrowserUI.SetTextEntry(true);
                    SuperController.singleton.fileBrowserUI.hideExtension = true;
                    SuperController.singleton.fileBrowserUI.shortCuts = new List<ShortCut>();
                    SuperController.singleton.fileBrowserUI.Show(SavePresetCallback);
                });
                _loadPresetButton.button.onClick.AddListener(() =>
                {   //update for 1.21 to use the existing preset dialog system
                    List<ShortCut> shortCuts = FileManagerSecure.GetShortCutsForDirectory(presetsPath, false, true, true, false);
                    SuperController.singleton.GetMediaPathDialog(PresetLoadCallBack, "json", presetsPath, false, true, false, null, true, shortCuts, true, true);
                });
                //legacy storables some addon may use
                JSONStorableAction resetAllAction = new JSONStorableAction("ClearAll", ResetAll);
                RegisterAction(resetAllAction);
                JSONStorableAction performLoadAction = new JSONStorableAction("PerformLoad", PerformLoad);
                RegisterAction(performLoadAction);
                JSONStorableAction resetTexturesAction = new JSONStorableAction("Reset To Original Textures", ResetOriginalGPUTexturesAction);
                RegisterAction(resetTexturesAction);
                //load a preset from path
                JSONStorableUrl loadPresetFile = new JSONStorableUrl("Load Preset File", string.Empty, LoadJSONRequest, "json", true);
                RegisterUrl(loadPresetFile);
                loadPresetFile.isStorable = false;
            }
            catch (Exception e)
            {
                SuperController.LogError("Decal Maker: Error during Init" + e);
            }
        }
        private void LoadJSONRequest(string path)
        {
            if (string.IsNullOrEmpty(path))
                return;
            JSONNode jn = LoadJSON(path);
            if (jn != null)
            {
                _savedData = (JSONClass)jn;
                PerformLoad();
            }
        }
        public Texture2D GetResource(string path, bool linear = false)
        {
            string cachepath = path + linear.ToString();
            Texture2D texture;
            if (resourceTextures.TryGetValue(cachepath, out texture))
            {
                return texture;
            }
            //not in dictionary
            byte[] tmppng = FileManagerSecure.ReadAllBytes(GetPackagePath(this) + path);
            texture = new Texture2D(1, 1, TextureFormat.DXT5, linear);
            texture.LoadImage(tmppng);
            resourceTextures.Add(cachepath, texture);
            return texture;
        }
        private void LogError(string err)
        {
            if (_Debug)
            {
                Debug.LogError(err);
            }
        }
        RenderPanelBase rp = null;
        public void SaveImageToFile(Texture2D tempTex, string path)
        {
            if (tempTex == null)
            {
                LogError("SaveImageToFile called witha  null texture");
                return;
            }
            //string path = "Custom/PluginData/Chokaphi/VAM_Decal_Maker/" + name;
            try 
            { 
                byte[] bytes = tempTex.EncodeToPNG();
                Debug.Log("Save to " + path);
                FileManagerSecure.WriteAllBytes(path + ".png", bytes);
            }
            catch (Exception ex)
            {
                LogError("This error is most likly due to trying to save a readonly texture./n" + ex.Message);
            }
            finally
            {
                GameObject.Destroy(tempTex);
                //Resources.UnloadAsset(tempTex);
            }
        }
        public void DebugSave(Texture2D tempTex, string name)
        {
            //string path = "Custom/PluginData/Chokaphi/VAM_Decal_Maker/" + name;
            //byte[] bytes = tempTex.EncodeToPNG();
            //FileManagerSecure.WriteAllBytes(path, bytes);
        }
        public Shader GetShader(string shaderEnum)
        { 
            return shaderData.GetShader(shaderEnum);
        }
        // Update is called with each rendered frame by Unity
        private void Update()
        {
            try
            {
                if (_SetupError)
                    return;
                //Fire UpdateEvents to subscribers
                if (_SetupFinished == true && OnUpDateAction != null)
                {
                    OnUpDateAction();
                }
                if (_dazCharacter != null && !_processingCharacterChange)
                {
                    if (_dazCharacter != _dazCharacterSelector.selectedCharacter)
                    {
                        _processingCharacterChange = true;
                        LogError("StartCoroutine(CharacterChanged()");
                        StartCoroutine(CharacterChanged());
                    }
                }
                if (shaderData._ShadersLoaded == false)
                {
                    LogError("On update call waiting on shaders to load");
                }
                if (_SetupFinished == false && shaderData._ShadersLoaded == true)
                {
                    LogError("On update call waiting on SetUp");
                    Setup();
                    LogError("setup should be finished " + _SetupFinished);
                }
            }
            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e);
            }
        }
        public void OnCoreChange(object o, PanelEventArgs e)
        {
            //Fire the event - notifying all subscribers
            CoreEvent?.Invoke(o, e);
        }
        //called on reload or removal of plugin
        public void OnDestroy()
        {
            StopCoroutine(CharacterChanged());
            StopCoroutine(MonitorLastLoadedAppearance());
            ResetOriginalGPUTextures(_dazCharacter);
            AssetLoader.DoneWithAssetBundleFromFile(GetPackagePath(this) + "Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/chokpahi-decal.assetbundle");
            DeregisterBool(_toggleNippleCutout);
            DeregisterBool(_toggleNippleCutout);
            _parentAtom.RemoveCanvas(UserConfirmCanvas);
            OnDestroyAction?.Invoke();
            foreach(Texture texture in  resourceTextures.Values.ToList())
            { 
                Destroy(texture);
            }
        }
        private void Setup()
        {
            try
            {
                //create Header Panel
                _headerPanel = new HeaderPanel(this);
                _resetButton.button.onClick.AddListener(() =>
                {
                    ResetOriginalGPUTextures(_dazCharacter);
                });
                _editButton.button.onClick.AddListener(() =>
                {
                    if (adjustmentPanel == null)
                    {
                        adjustmentPanel = new AdjustmentPanel(this);
                    }
                    else
                    {
                        adjustmentPanel.gameObject.SetActive(true);
                    }
                });
                //UIDynamicButton NewPanelButton = CreateButton(" LAST LEFT ELEMENT");
                //NewPanelButton.button.onClick.AddListener(() =>
                //{
                //    bool stopFlag = true;
                //    while (stopFlag) ;
                //});
                //UIDynamicButton NewPanelButtonBack = CreateButton("Get ");
                //NewPanelButtonBack.button.onClick.AddListener(() =>
                //{
                //    int id = TextureIndex.GetFirstTextureID(BodyRegionEnum.Torso, false);
                //    Texture2D tex = GetCurrentGPUTexture(id, "_BumpMap");
                //    SaveImageToFile(tex, "Custom/PluginData/Chokaphi/VAM_Decal_Maker/Current normal");
                //});
                //UIDynamicButton UnusedButton2 = CreateButton("LAST RIGHT ELEMENT", true);
                //UnusedButton2.button.onClick.AddListener(() =>
                //{
                //    ImageLoaderThreaded.singleton.ReportOnTextures();
                //});
                _genButton.button.onClick.AddListener(() =>
                {
                    if (genitalPanel == null)
                    {
                        genitalPanel = new GenitalPanel(this);
                    }
                    else
                    {
                        genitalPanel.Show();
                        //genitalPanel.gameObject.SetActive(true);
                    }
                });
                //ui for Appearnce link prompt
                //move into my own canvas Some may watch "UserConfirmCanvas" for child windows
                GameObject originalCanvasGo = GameObject.Find("UserConfirmCanvas");
                Canvas originalCanvas = originalCanvasGo.GetComponent<Canvas>();
                UserConfirmCanvas = Instantiate(originalCanvas);
                UserConfirmCanvas.transform.SetParent(originalCanvas.transform.parent);
                UserConfirmCanvas.transform.localPosition = originalCanvas.transform.localPosition;
                UserConfirmCanvas.transform.localRotation = originalCanvas.transform.localRotation;
                UserConfirmCanvas.transform.localScale = originalCanvas.transform.localScale;
                userConfirmPanel = new UserConfirmPanel(UserConfirmCanvas.transform, this);
                _parentAtom.AddCanvas(UserConfirmCanvas);
                userConfirmPanel.UpdateConfirmPanel(false, null);
                //this is hacky but sets the UI to look nice on start.
                _prefabButton.button.onClick.Invoke();
                _SetupFinished = true;
                OnCoreChange(this, new PanelEventArgs(EventEnum.CoreSetupFinished));
            }
            catch (Exception e)
            {
                SuperController.LogError("Exception caught: " + e.Message);
                SuperController.LogError(e.StackTrace);
                _SetupError = true;
            }
        }
        public Texture2D GetOriginalGPUTexture(int id, string MaterialSlot)
        {
            return gpuTextureData.GetOriginalGPUTexture(id, MaterialSlot);
        }
        public Texture2D GetCurrentGPUTexture(int id, string MaterialSlot)
        {
            return (Texture2D)_dazSkin.GPUmaterials[id].GetTexture(MaterialSlot);
        }
        public void RestoreGPUMatbyID(int id, string MaterialSlot)
        {
            gpuTextureData.RestoreGPUMatbyID(id, MaterialSlot);
        }
        public void StoreNormalDisplayTex(string MaterialSlot, string bodyRegion, Texture2D texture)
        { 
            gpuTextureData.StoreNormalDisplayTex(MaterialSlot, bodyRegion, texture);
        }
        public Texture2D GetNormalDisplayTex(string materialSlot, string bodyRegion)
        {
           return gpuTextureData.GetWorkingTexture(materialSlot, bodyRegion);
        }
        private bool CheckForAppeancePresetSave()
        {
            JSONArray storables = _appearancePresetManager.lastLoadedJSON["storables"] as JSONArray;
            if (storables != null)
            {
                JSONNode node = storables.Childs.Where(x => x["id"].Value.EndsWith("_VAM_Decal_Maker.Decal_Maker")).FirstOrDefault();
                if (node != null)
                {
                    JSONClass jc = node as JSONClass;
                    userConfirmPanel.UpdateConfirmPanel(true, jc);
                }
            }
            return false;
        }
        private IEnumerator MonitorLastLoadedAppearance()
        {   //starts as null
            while (true)
            {
                LogError("_lastLoaded waiting till not null");
                yield return new WaitWhile(() => _appearancePresetManager.lastLoadedJSON == null);
                LogError("_lastLoaded IS not null");
                yield return new WaitWhile(() => _lastLoadedAppearanceJSON == _appearancePresetManager.lastLoadedJSON);
                yield return new WaitWhile(() => _processingCharacterChange);
                LogError("Set _lastLoaded");
                //store the current value of PresetManager lastLoadedJSON to restore DM prests on appearance changes
                _lastLoadedAppearanceJSON = _appearancePresetManager.lastLoadedJSON;
                //check and load decal maker preset if exists
                yield return new WaitWhile(() => CheckForAppeancePresetSave());
            }
        }
        private IEnumerator CharacterUpdated(bool newCharacter = false)
        {
            if (!newCharacter)
                yield return new WaitForSeconds(1);
            LogError("CharacterUpdated");
            //loadingIcon.gameObject stays true until all texture/cloathing load process is finished
            LogError("yielding till all textures load " + SuperController.singleton.loadingIcon.gameObject.activeSelf);
            yield return new WaitWhile(() => SuperController.singleton.loadingIcon.gameObject.activeSelf);
            LogError("textures load finished continue coroutine");
            //should store the current skin textures.
            LogError("STORE Current Skin Textures");
            gpuTextureData = new GpuTextureData(this, _dazSkin); //auto stores mats on creation
            yield return new WaitWhile(()=> gpuTextureData.finished == false);
            OnCoreChange(this, new PanelEventArgs(EventEnum.CoreNewCharacterSelected, newCharacter));
            _processingCharacterChange = false;
        }
        private IEnumerator CharacterChanged()
        {
            LogError("CharacterChanged");
            //used to know which character is being used or changed
            _dazCharacterSelector = _parentAtom.GetComponentInChildren<DAZCharacterSelector>();
            DAZCharacter previousDazCharacter = _dazCharacter;
            ResetOriginalGPUTextures(previousDazCharacter);
            _dazCharacter = _dazCharacterSelector.selectedCharacter;
            yield return new WaitUntil(() => _dazCharacter.ready);
            _dazSkin = (DAZMergedSkinV2)_dazCharacter.skin;
            _isMale = _dazCharacter.isMale;
            _uvSetName = _dazCharacter.UVname.Replace("UV: ", "");
            LogError("Waiting on UI");
            yield return new WaitUntil(() => _SetupFinished == true);
            LogError("UI should be ready");
            _processingCharacterChange = true;
            yield return StartCoroutine(CharacterUpdated(true));
            if (_savedData != null)
            {
                LogError("Restore save state");
                PerformLoad(_savedData);
                _savedData = null;
            }
            _processingCharacterChange = false;
        }
        //called on character change or UI
        private void ResetOriginalGPUTexturesAction()
        {
            ResetOriginalGPUTextures(_dazCharacter);
        }
        private void ResetOriginalGPUTextures(DAZCharacter dAZCharacter)
        {
            try
            {
                if (dAZCharacter == null || _dazSkin == null)
                    return;
                gpuTextureData.RestoreGPUMats();
            }
            catch (Exception e)
            {
                SuperController.LogError("Decal Maker: Error resetting custom textures " + e);
            }
        }
        private void ResetAll()
        {
            ResetOriginalGPUTextures(_dazCharacter);
            OnCoreChange(this, new PanelEventArgs(EventEnum.CoreResetAll));
        }
        private void PresetLoadCallBack(string path)
        {
            PresetLoad(path);
        }
        #region LOAD/SAVE
        public void PresetLoad(string path, bool temp = false, string package = null)
        {
            if (string.IsNullOrEmpty(path))
                return;
            JSONClass jc = this.LoadJSON(path) as JSONClass;
            PerformLoad(jc, temp, package, path);
        }
        private void SavePresetCallback(string path, bool autoScreenShot = false)
        {
            if (string.IsNullOrEmpty(path))
                return;
            JSONClass json = GetJSON();
            path = path.Replace(".dsgn.DecalMakerPreset", "");
            path = path.Replace(".DecalMakerPreset", "");
            path += ".DecalMakerPreset.json";
            this.SaveJSON(json, path);
            SuperController.singleton.DoSaveScreenshot(path);
            //if(autoScreenShot)
            //    SuperController.singleton.SetLeftSelect();
            //SuperController.singleton.fileBrowserUI.ClearCacheImage(path);
        }
        //SAVE
        public override JSONClass GetJSON(bool includePhysical = true, bool includeAppearance = true, bool forceStore = false)
        {
            JSONClass jc = base.GetJSON(includePhysical, includeAppearance, true);
            jc["SaveVersion"] = "2";
            foreach (string matSlot in MatSlotEnum.Values)
            {
                foreach (string region in BodyRegionEnum.Values)
                {
                    //each manager has subscribed to this delegate. Each will only respond when they match the passed arguments
                    //since only the last subscriber gets val return normally. Use a custom invoke to record each 
                    var subs = GetJSONDelegate.GetInvocationList();
                    foreach (var sub in subs)
                    {
                        JSONArray dc = (JSONArray)sub.DynamicInvoke(matSlot, region);
                        if (dc != null)
                        {
                            jc[matSlot][region] = dc;
                        }
                    }
                }
            }
            jc["Nipple Cutouts ON"] = _toggleNippleCutout.val.ToString();
            jc["Genital Cutouts ON"] = _toggleGenitalCutout.val.ToString();
            return jc;
        }
        //LOAD 
        public override void RestoreFromJSON(JSONClass jc, bool restorePhysical = true, bool restoreAppearance = true, JSONArray presetAtoms = null, bool setMissingToDefault = true)
        {
            base.RestoreFromJSON(jc, restorePhysical, restoreAppearance, presetAtoms);
            //store and call once we have everything loaded. RestorefromJSON is too early
            _savedData = jc;
        }
        //used for JSONStorableAction
        public void PerformLoad()
        {
            PerformLoad(_savedData);
        }
        private void PerformLoad(JSONClass jc, bool IsTemp = false, string package = null, string selectedFile = null)
        {
            if (jc == null)
                return;
            //convert to new file version if save is old
            try
            {
                if (jc["SaveVersion"] == null)
                    jc = ConvertSaveToV1(jc);
                if (jc["SaveVersion"].AsInt == 1)
                    jc = ConvertSaveToV2(jc);
            }
            catch
            {
                SuperController.LogError("Decal Maker: Unable to convert save");
                return;
            }
            // Load Save Data
            try
            {
                _toggleNippleCutout.RestoreFromJSON(jc);
                _toggleGenitalCutout.RestoreFromJSON(jc);
                foreach (string matSlot in MatSlotEnum.Values)
                {
                    foreach (string region in BodyRegionEnum.Values)
                    {
                        if (jc[matSlot] != null && jc[matSlot][region] != null)
                        {
                            JSONArray array = jc[matSlot][region] as JSONArray;
                            foreach (JSONClass saveJSON in array)
                            {
                                OnCoreChange(this, new PanelEventArgs(EventEnum.CoreRestoreFromJSON, saveJSON) { materialSlot = matSlot, bodyRegion = region, Bool = IsTemp });
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                SuperController.LogError("Decal Maker: Unable to Load save");
                SuperController.LogError(e.Message);
                SuperController.LogError(e.StackTrace);
                return;
            }
            finally
            {
                _savedData = null;
            }
        }
        #endregion
        #region Upgrade Save Version
        //upgrades old saves to new format
        private JSONClass ConvertSaveToV1(JSONClass jc)
        {
            List<string> keys = new List<string>() { BodyRegionEnum.Torso, BodyRegionEnum.Genitals, BodyRegionEnum.Face, BodyRegionEnum.Limbs };
            JSONClass dc = new JSONClass();
            foreach (string key in keys)
            {
                if (jc[key] != null)
                {
                    dc.Add(key, jc[key]);
                }
                jc.Remove(key);
            }
            jc["Decal"] = dc;
            return jc;
        }
        private JSONClass ConvertSaveToV2(JSONClass jc)
        {
            try
            {
                //old keys
                Dictionary<string, string> conversion = new Dictionary<string, string>() { { "Decal", MatSlotEnum.DecalTex }, { "Specular", MatSlotEnum.SpecTex }, { "Gloss", MatSlotEnum.GlossTex }, { "Normal", MatSlotEnum.BumpMap } };
                //SuperController.singleton.SaveJSON(jc, "OUT 1.txt");
                foreach (var keyValue in conversion)
                {
                    JSONClass n = new JSONClass();
                    if (jc[keyValue.Key] != null)
                    {
                        n.Add(keyValue.Value, jc[keyValue.Key]);
                        jc.Remove(keyValue.Key);
                        jc.Add(keyValue.Value, n[keyValue.Value]);
                    }
                }
                jc["SaveVersion"].AsInt = 2;
                return jc;
            }
            catch (Exception e)
            {
                SuperController.LogError("Convert to save version 2 error " + e.Message);
                return null;
            }
        }
    }
    #endregion
}
//*** SourceCombiner -> original file AdjustmentPanel.cs ***
namespace VAM_Decal_Maker
{
    public class AdjustmentPanel : PanelBase
    {
        private MyButton centerpoint;
        private ImagePanelBase bottomPanel;
        private JSONStorableStringChooser regionJSSC;
        private JSONStorableStringChooser decalJSSC;
        private JSONStorableFloat rotationJSF;
        private JSONStorableFloat scaleJSF;
        private List<string> DecalChoices = new List<string>();
        private DecalPanel currentDecal;
        private List<DecalPanel> DecalPanels;
        private bool IsMouseDown = false;
        private bool IsMouseIn = false;
        private bool IsMouseDownCE = false;
        private bool IsMouseInCE = false;
        //lazy load since it will not be used often
        private RenderPanelCPU _render;
        private RenderPanelCPU RenderPanel
        {
            get
            {
                if (_render == null)
                    _render = new RenderPanelCPU(DM, MatSlotEnum.DecalTex, BodyRegionEnum.Torso);
                return _render;
            }
        }
        private TextPanel locationTextPanel;
        private string LocationText { set { locationTextPanel.text = value; } }
        private Vector2 lastMouseUVPosition;
        public AdjustmentPanel(Decal_Maker DM) : base(DM)
        {
            CreatePanelBackground(1078, 1300, Converters.RGBIntToFloat(105, 19, 134));
            gameObject.transform.SetParent(DM.UITransform, false);
            gameObject.transform.localPosition = new Vector3(0, 0, 0);
            bottomPanel = new ImagePanelBase(DM, MatSlotEnum.MainTex, BodyRegionEnum.Torso, false, false);
            bottomPanel.transform.SetParent(transform, false);
            bottomPanel.transform.localPosition = new Vector3(0, -50, 0);
            bottomPanel.material = new Material(DM.GetShader(ShaderEnum.DecalShaderUI));
            RectTransform rct = bottomPanel.gameObject.GetComponent<RectTransform>();
            rct.sizeDelta = new Vector2(1078, 1000);
            //15,2,0,28
            bottomPanel.material.SetTexture("_MainTex", DM._dazSkin.GPUmaterials[15].GetTexture(MatSlotEnum.MainTex));
            //SetLayout(100, 100);
            MouseEvent me = bottomPanel.Button.gameObject.AddComponent<MouseEvent>();
            me.MouseDown = (e) =>
            {
                IsMouseDown = true;
                lastMouseUVPosition = CalculateUVTranslate();
            };
            me.MouseUp = (e) => { IsMouseDown = false; };
            me.MouseEnter = (e) => { IsMouseIn = true; };
            me.MouseExit = (e) => { IsMouseIn = false; };
            me.MouseDrag = UpdateTextureTranslate;
            //piviot icon
            centerpoint = new MyButton("X", Color.cyan, bottomPanel.transform, Vector3.zero, new Vector2(20, 20));
            centerpoint.button.onClick.AddListener(() => { });
            centerpoint.button.OnPointerUpAction = UpdateCenterpoint;
            MouseEvent ce = centerpoint.button.gameObject.AddComponent<MouseEvent>();
            ce.MouseDown = (e) => { IsMouseDownCE = true; };
            ce.MouseUp = (e) => { IsMouseDownCE = false; };
            ce.MouseEnter = (e) => { IsMouseInCE = true; };
            ce.MouseExit = (e) => { IsMouseInCE = false; };
            ce.MouseDrag = MoveCenterpointButton;
            MyButton resetButton = new MyButton("Reset", Color.red, transform, new Vector3(-450, -600, 0), new Vector2(100, 50));
            resetButton.button.onClick.AddListener(Reset);
            MyButton saveButton = new MyButton("Export", Color.green, transform, new Vector3(300, -600, 0), new Vector2(100, 50));
            saveButton.button.onClick.AddListener(() =>
            {
                SuperController.singleton.fileBrowserUI.defaultPath = "Custom/Atom/Person/Textures";
                SuperController.singleton.fileBrowserUI.showFiles = true;
                SuperController.singleton.fileBrowserUI.showDirs = true;
                SuperController.singleton.fileBrowserUI.SetTextEntry(true);
                SuperController.singleton.fileBrowserUI.hideExtension = true;
                SuperController.singleton.fileBrowserUI.shortCuts = new List<ShortCut>();
                SuperController.singleton.fileBrowserUI.Show(SaveImage);
            });
            MyButton closeButton = new MyButton("Close", Color.yellow, transform, new Vector3(450, -600, 0), new Vector2(100, 50));
            closeButton.button.onClick.AddListener(() => { gameObject.SetActive(false); });
            locationTextPanel = new TextPanel(gameObject, new Vector3(0, -600, 0), "UV location")
            {
                text = "0,0",
                color = Converters.RGBIntToFloat(236, 236, 19),
                fontSize = 30,
                fontStyle = FontStyle.Bold,
                alignment = TextAnchor.MiddleCenter,
                sizeDelta = new Vector2(600, 50)
            };
            PanelBase topPanel = new PanelBase(DM);
            topPanel.transform.SetParent(transform, false);
            topPanel.transform.localPosition = new Vector3(0, 550, 0);
            topPanel.SetLayout(1048 / 2, 95);
            topPanel.CreatePanelBackground(1078, 200, Converters.RGBIntToFloat(105, 19, 134));
            GridLayoutGroup glg = topPanel.gameObject.GetComponent<GridLayoutGroup>();
            glg.constraintCount = 2;
            regionJSSC = new JSONStorableStringChooser("Body Part", BodyRegionEnum.Values, string.Empty, "Select Body Part", RegionSelectionChange);
            UIDynamicPopup dynamicPopupType = UIWidgets.CreatePopup(DM, topPanel.transform, regionJSSC);
            decalJSSC = new JSONStorableStringChooser("Decal", DecalChoices, string.Empty, "Select Decal To Edit", DecalSelectionChange);
            UIDynamicPopup dynamicDecalType = UIWidgets.CreatePopup(DM, topPanel.transform, decalJSSC);
            rotationJSF = new JSONStorableFloat("Rotation", 0, RotationChanged, -360, 360);
            UIDynamicSlider UISliderRot = UIWidgets.CreateSlider(DM, topPanel.transform, rotationJSF, -360, 360, 0, "Rotation", 1);
            UISliderRot.labelText.transform.localPosition = new Vector3(0, -20, 0);
            scaleJSF = new JSONStorableFloat("Scale", 1, ScaleChanged, -10, 10, false);
            UIDynamicSlider UISliderScale = UIWidgets.CreateSlider(DM, topPanel.transform, scaleJSF, -10, 10, 1, "Scale", 1);
            UISliderScale.labelText.transform.localPosition = new Vector3(0, -20, 0);
            RegisterForCoreEvents(CoreEvents);
            regionJSSC.SetVal(BodyRegionEnum.Torso);
        }
        private void Reset()
        {
            Vector4 m = new Vector4(0, 0, 0.5f, 0.5f);
            if (currentDecal != null)
            {
                currentDecal.TextureScaleJSF.SetValToDefault();
                currentDecal.TextureRotationJSF.SetValToDefault();
                currentDecal.TextureRotationJSF.SetValToDefault();
                currentDecal.TextureScaleJSF.SetValToDefault();
                currentDecal.TextureTranAndCenter = m;
                LocationText = "0,0";
                centerpoint.transform.localPosition = Vector2.zero;
            }
            else
            {
                bottomPanel.material.SetFloat("_DecalScale0", 1);
                bottomPanel.material.SetFloat("_DecalRot0", 0);
                bottomPanel.material.SetVector("_DecalTrans0", m);
                LocationText = "0,0";
                rotationJSF.SetValToDefault();
                scaleJSF.SetValToDefault();
                centerpoint.transform.localPosition = Vector2.zero;
            }
        }
        private void Sync()
        {
            if (currentDecal != null)
            {
                bottomPanel.material.SetTexture("_DecalTex0", currentDecal.ImagePanel.mainTexture);
                bottomPanel.material.SetColor("_DecalColor0", currentDecal.ImagePanel.color);
                bottomPanel.material.SetFloat("_DecalScale0", currentDecal.TextureScaleJSF.val);
                bottomPanel.material.SetFloat("_DecalRot0", currentDecal.TextureRotationJSF.val);
                Vector4 m = currentDecal.TextureTranAndCenter;
                bottomPanel.material.SetVector("_DecalTrans0", m);
                LocationText = string.Format("{0:f3},{1:f3}", m.x, m.y);
            }
            else
            {
                bottomPanel.material.SetTexture("_DecalTex0", null);
                bottomPanel.material.SetFloat("_DecalScale0", 1);
                bottomPanel.material.SetFloat("_DecalRot0", 0);
                Vector4 m = new Vector4(0, 0, 0.5f, 0.5f);
                bottomPanel.material.SetVector("_DecalTrans0", m);
                LocationText = "0,0";
                rotationJSF.SetValToDefault();
                scaleJSF.SetValToDefault();
                centerpoint.transform.localPosition = Vector2.zero;
            }
        }
        private void ScaleChanged(float value)
        {
            if (currentDecal != null)
            {
                currentDecal.TextureScaleJSF.SetVal(value);
            }
        }
        private void RotationChanged(float value)
        {
            if (currentDecal != null)
            {
                currentDecal.TextureRotationJSF.SetVal(value);
            }
        }
        private void UpdateDecalChooser(string s = BodyRegionEnum.Torso)
        {
            ManagerPanel manager;
            DM._headerPanel.SelectionPanelDecal.ManagerPanels.TryGetValue(s, out manager);
            if (manager == null)
                DM._headerPanel.SelectionPanelDecalEye.ManagerPanels.TryGetValue(s, out manager);
            if (manager != null)
            {
                DecalPanels = manager.DecalPanels;
                DecalChoices = new List<string>();
                foreach (DecalPanel d in manager.DecalPanels)
                {
                    //Debug.Log("Panels added " + d.RandomName);
                    DecalChoices.Add(d.RandomName);
                }
                decalJSSC.choices = null;
                decalJSSC.choices = DecalChoices;
                Sync();
            }
        }
        private void RegionSelectionChange(string s)
        {
            UpdateDecalChooser(s);
            //select first decal if available
            string start = decalJSSC.choices.FirstOrDefault();
            decalJSSC.SetVal(start);
            int id = TextureIndex.GetFirstTextureID(s, DM._isMale);
            Texture texture = DM._dazSkin.GPUmaterials[id].GetTexture(MatSlotEnum.MainTex);
            bottomPanel.material.SetTexture("_MainTex", texture);
            bottomPanel.gameObject.SetActive(false);
            bottomPanel.gameObject.SetActive(true);
            //update the DecalSelection
        }
        private void DecalSelectionChange(string s)
        {
            currentDecal = null;
            for (int i = 0; i < DecalChoices.Count; i++)
            {
                if (DecalChoices[i] == s)
                {
                    currentDecal = DecalPanels[i];
                    break;
                }
            }
            if (currentDecal != null)
            {
                Sync();
                rotationJSF.SetVal(currentDecal.TextureRotationJSF.val);
                scaleJSF.SetVal(currentDecal.TextureScaleJSF.val);
            }
            else
            {
                Reset();
                //reset panel
                bottomPanel.material.SetTexture("_DecalTex0", null);
                bottomPanel.material.SetColor("_DecalColor0", Color.clear);
                currentDecal = null;
            }
        }
        private Vector2 CalculateUVTranslate()
        {
            Vector2 vector2 = CalculateUVPos();
            //apply offset to move 0,0 lower left to 0,0 in center
            vector2.x = vector2.x - 0.5f;
            vector2.y = vector2.y - 0.5f;
            return vector2;
        }
        private Vector2 CalculateUVPos()
        {
            Texture2D tex = (Texture2D)bottomPanel.material.mainTexture;
            RectTransform rct = bottomPanel.gameObject.GetComponent<RectTransform>();
            Rect r = rct.rect;
            Vector2 pos;
            RectTransformUtility.ScreenPointToLocalPointInRectangle(rct, Input.mousePosition, Camera.main, out pos);
            int px = Mathf.Clamp(0, (int)(((pos.x - r.x) * tex.width) / r.width), tex.width);
            int py = Mathf.Clamp(0, (int)(((pos.y - r.y) * tex.height) / r.height), tex.height);
            float U = px / (float)tex.width;
            float V = py / (float)tex.height;
            return new Vector2(U, V);
        }
        private void UpdateTextureTranslate(PointerEventData e)
        {
            if (IsMouseDown && IsMouseIn && !IsMouseDownCE && !IsMouseInCE)
            {
                //Get how far mouse has moved and add that to the UV translation
                Vector2 currentUV = CalculateUVTranslate();
                Vector2 mouseDelta = currentUV - lastMouseUVPosition;
                lastMouseUVPosition = currentUV;
                if (currentDecal != null)
                {
                    float rotation = currentDecal.TextureRotationJSF.val;
                    float scale = currentDecal.TextureScaleJSF.val;
                    Vector2 initial = currentDecal.TextureTranslate;
                    //ChatGPT Keeps mouse 1:1 whith the scaled UV
                    // Calculate the inverse of the transformation matrix
                    Matrix4x4 matrix = Matrix4x4.TRS(initial, Quaternion.AngleAxis(rotation, Vector3.forward), Vector3.one / scale);
                    // Apply the inverse matrix to the mouse delta to make it proportional to the original texture size
                    Vector3 TRSDelta = matrix * new Vector3(mouseDelta.x, mouseDelta.y, 0);
                    // Calculate the new texture position using the transformed mouse delta
                    Vector2 newPosition = initial - new Vector2(TRSDelta.x, TRSDelta.y);
                    currentDecal.TextureTranslate = newPosition;
                }
            }
        }
        private void MoveCenterpointButton(PointerEventData e)
        {
            if (IsMouseDownCE && (IsMouseInCE || IsMouseIn))
            {
                Vector2 pos;
                RectTransformUtility.ScreenPointToLocalPointInRectangle(bottomPanel.transform as RectTransform, Input.mousePosition, SuperController.singleton.MonitorCenterCamera, out pos);
                centerpoint.transform.localPosition = pos;
            }
        }
        private void UpdateCenterpoint()
        {
            if (IsMouseDownCE && (IsMouseInCE || IsMouseIn))
            {
                if (currentDecal != null)
                {
                    Vector4 m = currentDecal.TextureTranAndCenter;
                    Vector2 UV = CalculateUVPos();
                    m.z = UV.x;
                    m.w = UV.y;
                    // Debug.Log(string.Format("x={0:f3} y={1:f3} z={2:f3} w={3:f3} Dx{4:f3} Dy{5:f3}", m.x, m.y, UV.x, UV.y, TRSDelta.x, TRSDelta.y));
                    currentDecal.TextureTranAndCenter = m;
                }
            }
        }
        private void SaveGPUtex(Texture2D tempTex, string path)
        {
            DM.ToggleNipsCallBack(true);
            DM.ToggleGensCallBack(true);
            DM.SaveImageToFile(tempTex, path);
        }
        private void SaveImage(string path)
        {
            if (currentDecal == null)
                return;
            RenderPanel.SetGPUTexDelegate = ((Texture2D tempTex, string MaterialSlot, string TextureSlot) =>
            {
                if (!string.IsNullOrEmpty(path))
                {
                    SaveGPUtex(tempTex, path);
                }
            });
            RenderPanel.DecalPanels = new List<DecalPanel>
            {
                //HINT: If you add the other from the DecalPanels list you would get the blended output.
                currentDecal
            };
            DM.ToggleNipsCallBack(false);
            DM.ToggleGensCallBack(false);
            DM.StartCoroutine(RenderPanel.ApplyChanges());
        }
        protected override void Update()
        {
        }
        private void CoreEvents(object sender, PanelEventArgs e)
        {
            //Debug.Log(DateTime.Now + " " + e.EventName);
            switch (e.EventName)
            {
                case EventEnum.DecalPanelTextureMove:
                    if (currentDecal == e.DecalPanel)
                    {
                        Sync();
                    }
                    break;
                case EventEnum.ManagerPanelButtonCLOSE:
                case EventEnum.ManagerPanelButtonADD:
                case EventEnum.DecalPanelMove:
                case EventEnum.DecalPanelDELETE:
                case EventEnum.DecalPanelButtonAdd:
                case EventEnum.DecalPanelButtonCLOSE:
                case EventEnum.DecalPanelButtonCOPY:
                case EventEnum.DecalPanelButtonDOWN:
                    if (e.DecalPanel != null && !string.IsNullOrEmpty(e.DecalPanel.TextureSlot))
                    {
                        UpdateDecalChooser(e.DecalPanel.TextureSlot);
                    }
                    break;
            }
        }
        public override void OnDestroy()
        {
            UnRegisterForCoreEvents(CoreEvents);
            base.OnDestroy();
        }
    }
    public class MouseEvent : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IDragHandler
    {
        public Action<PointerEventData> MouseDown;
        public Action<PointerEventData> MouseUp;
        public Action<PointerEventData> MouseEnter;
        public Action<PointerEventData> MouseExit;
        public Action<PointerEventData> MouseDrag;
        public void OnDrag(PointerEventData eventData)
        {
            MouseDrag?.Invoke(eventData);
        }
        public void OnPointerDown(PointerEventData eventData)
        {
            //Debug.Log("StartDrag");
            MouseDown?.Invoke(eventData);
        }
        public void OnPointerEnter(PointerEventData eventData)
        {
            //Debug.Log("Enter");
            MouseEnter?.Invoke(eventData);
        }
        public void OnPointerExit(PointerEventData eventData)
        {
            //Debug.Log("Exit");
            MouseExit?.Invoke(eventData);
        }
        public void OnPointerUp(PointerEventData eventData)
        {
            //Debug.Log("StopDrag");
            MouseUp?.Invoke(eventData);
        }
    }
}
//*** SourceCombiner -> original file GenitalPanel.cs ***
namespace VAM_Decal_Maker
{
    public class GenitalPanel : PanelBase
    {
        private ImagePanelBase bottomPanel;
        private JSONStorableStringChooser regionJSSC;
        private JSONStorableStringChooser decalJSSC;
        private JSONStorableFloat hsvHueJSF;
        private JSONStorableFloat hsvSatJSF;
        private JSONStorableFloat hsvValJSF;
        private RenderPanelGenital _renderCPU;
        private bool Initialized = false;
        private RenderPanelGenital RenderCPU
        {
            get
            {
                if (_renderCPU == null)
                    _renderCPU = new RenderPanelGenital(DM, MatSlotEnum.DecalTex, BodyRegionEnum.Genitals, bottomPanel.material);
                return _renderCPU;
            }
        }
        private List<string> DecalChoices = new List<string>();
        private List<string> GenitalAreas = new List<string>() { "base", "labia", "anus", "hood" };
        private DecalPanel currentDecal;
        public GenitalPanel(Decal_Maker DM) : base(DM)
        {
            CreatePanelBackground(1078, 1300, Converters.RGBIntToFloat(105, 19, 134));
            gameObject.transform.SetParent(DM.UITransform, false);
            gameObject.transform.localPosition = new Vector3(0, 0, 0);
            bottomPanel = new ImagePanelBase(DM, MatSlotEnum.MainTex, BodyRegionEnum.Torso, false, false);
            bottomPanel.transform.SetParent(transform, false);
            bottomPanel.transform.localPosition = new Vector3(0, -50, 0);
            bottomPanel.material = new Material(DM.GetShader(ShaderEnum.GenitalMakerShaderUI));
            RectTransform rct = bottomPanel.gameObject.GetComponent<RectTransform>();
            rct.sizeDelta = new Vector2(1078, 1000);
            //15,2,0,28
            bottomPanel.material.SetTexture("_TorsoTex", DM._dazSkin.GPUmaterials[15].GetTexture(MatSlotEnum.MainTex));
            MyButton saveButton = new MyButton("Export", Color.green, transform, new Vector3(300, -600, 0), new Vector2(100, 50));
            saveButton.button.onClick.AddListener(() =>
            {
                SuperController.singleton.fileBrowserUI.defaultPath = "Custom/Atom/Person/Textures";
                SuperController.singleton.fileBrowserUI.showFiles = true;
                SuperController.singleton.fileBrowserUI.showDirs = true;
                SuperController.singleton.fileBrowserUI.SetTextEntry(true);
                SuperController.singleton.fileBrowserUI.hideExtension = true;
                SuperController.singleton.fileBrowserUI.shortCuts = new List<ShortCut>();
                SuperController.singleton.fileBrowserUI.Show(SaveImage);
            });
            MyButton closeButton = new MyButton("Close", Color.yellow, transform, new Vector3(450, -600, 0), new Vector2(100, 50));
            closeButton.button.onClick.AddListener(() => { gameObject.SetActive(false); });
            PanelBase topPanel = new PanelBase(DM);
            topPanel.transform.SetParent(transform, false);
            topPanel.transform.localPosition = new Vector3(0, 550, 0);
            topPanel.SetLayout(1048 / 2, 95);
            topPanel.CreatePanelBackground(1078, 200, Converters.RGBIntToFloat(105, 19, 134));
            GridLayoutGroup glg = topPanel.gameObject.GetComponent<GridLayoutGroup>();
            glg.constraintCount = 3;
            glg.startCorner = GridLayoutGroup.Corner.UpperRight;
            hsvHueJSF = new JSONStorableFloat("Hue", 0, BaseColor, 0, 1);
            UIDynamicSlider HueSlider = UIWidgets.CreateSlider(DM, topPanel.transform, hsvHueJSF, 0, 1, 0, "Hue", 1);
            HueSlider.labelText.transform.localPosition = new Vector3(0, -20, 0);
            regionJSSC = new JSONStorableStringChooser("Body Part", GenitalAreas, "base", "Select Part", RegionSelectionChange);
            UIDynamicPopup dynamicPopupType = UIWidgets.CreatePopup(DM, topPanel.transform, regionJSSC);
            hsvSatJSF = new JSONStorableFloat("Sat", 0, BaseColor, 0, 1);
            UIDynamicSlider SatSlider = UIWidgets.CreateSlider(DM, topPanel.transform, hsvSatJSF, 0, 1, 0, "Sat", 1);
            SatSlider.labelText.transform.localPosition = new Vector3(0, -20, 0);
            decalJSSC = new JSONStorableStringChooser("Decal", DecalChoices, DecalChoices, string.Empty, "Select Decal To Edit", DecalSelectionChange);
            UIDynamicPopup dynamicDecalType = UIWidgets.CreatePopup(DM, topPanel.transform, decalJSSC);
            hsvValJSF = new JSONStorableFloat("Val", 1, BaseColor, 0, 1);
            UIDynamicSlider ValSlider = UIWidgets.CreateSlider(DM, topPanel.transform, hsvValJSF, 0, 1, 1, "Val", 1);
            ValSlider.labelText.transform.localPosition = new Vector3(0, -20, 0);
            Init();
        }
        private void Init()
        {
            if (DM._isMale)
            {
                bottomPanel.material.SetTexture("_GenitalTex", DM.GetResource("Custom/Atom/Person/Textures/MaleBase/genitalsD.png"));
            }
            else
            {
                bottomPanel.material.SetTexture("_GenitalTex", DM.GetResource("Custom/Atom/Person/Textures/GenitalMaker/base/base1.png"));
                bottomPanel.material.SetTexture("_HoodTex", DM.GetResource("Custom/Atom/Person/Textures/GenitalMaker/hood/Genital_Base_Hood.png"));
                bottomPanel.material.SetTexture("_LabiaTex", DM.GetResource("Custom/Atom/Person/Textures/GenitalMaker/labia/MonsterShinkai_1_KayGensD_Labia.png"));
                bottomPanel.material.SetTexture("_AnusTex", DM.GetResource("Custom/Atom/Person/Textures/GenitalMaker/anus/Asian_Big.png"));
                Initialized = true;
            }
        }
        public void Show()
        {
            int id = TextureIndex.GetFirstTextureID(BodyRegionEnum.Torso, DM._isMale);
            bottomPanel.material.SetTexture("_MainTex", DM.GetCurrentGPUTexture(id, MatSlotEnum.MainTex));
            if (!Initialized)
            {
                Init();
            }
            gameObject.SetActive(true);
        }
        private void BaseColor(float f)
        {
            float H = hsvHueJSF.val;
            float S = hsvSatJSF.val;
            float V = hsvValJSF.val;
            Color color = Color.HSVToRGB(H, S, V);
            bottomPanel.material.SetColor("_GenitalColor", color);
            RenderCPU.IsDirty = true;
        }
        private void DecalSelectionChange(string decal)
        {
            string region = regionJSSC.val;
            //Debug.Log("Que inage " + decal + " " + region);
            LoadImage(decal, region);
        }
        private void RegionSelectionChange(string region)
        {
            UpdateTexList(region);
            //select first decal if available
            string start = decalJSSC.choices.FirstOrDefault();
            decalJSSC.SetVal(start);
            bottomPanel.gameObject.SetActive(false);
            bottomPanel.gameObject.SetActive(true);
            //update the DecalSelection
        }
        private void UpdateTexList(string choice)
        {
            string path = PathHelper.GetPackagePath(DM) + "Custom/Atom/Person/Textures/GenitalMaker/" + choice;
            //Debug.Log(path + " " + FileManagerSecure.DirectoryExists(path));
            if (FileManagerSecure.DirectoryExists(path))
            {
                string[] files = FileManagerSecure.GetFiles(path);
                decalJSSC.choices = files.ToList();
                List<string> list = new List<string>();
                foreach (string file in files)
                {
                    list.Add(FileManagerSecure.GetFileName(file));
                }
                decalJSSC.displayChoices = list;
            }
        }
        private void LoadImage(string filePath, string region)
        {
            GenQueuedImage queuedImage = new GenQueuedImage();
            queuedImage.region = region;
            queuedImage.imgPath = filePath;
            queuedImage.forceReload = false;
            queuedImage.createMipMaps = false;
            queuedImage.isNormalMap = IsNormalMap;
            queuedImage.isThumbnail = false;
            queuedImage.linear = linear;
            queuedImage.createAlphaFromGrayscale = false;
            queuedImage.compress = false;
            if (!IsNormalMap)
            {
                queuedImage.compress = true;
            }
            queuedImage.callback = new ImageLoaderThreaded.ImageLoaderCallback(OnImageLoaded); // = new ImageLoaderThreaded.ImageLoaderCallback(OnImageLoaded);
            //start image load
            ImageLoaderThreaded.singleton.QueueImage(queuedImage);
        }
        private void OnImageLoaded(ImageLoaderThreaded.QueuedImage qi)
        {
            GenQueuedImage gqi = (GenQueuedImage)qi;
            string region = gqi.region;
            switch (region)
            {
                case "base":
                    bottomPanel.material.SetTexture("_GenitalTex", gqi.tex);
                    break;
                case "anus":
                    bottomPanel.material.SetTexture("_AnusTex", gqi.tex);
                    bottomPanel.material.SetColor("_AnusColor", Color.white);
                    break;
                case "hood":
                    bottomPanel.material.SetTexture("_HoodTex", gqi.tex);
                    bottomPanel.material.SetColor("_HoodColor", Color.white);
                    break;
                case "labia":
                    bottomPanel.material.SetTexture("_LabiaTex", gqi.tex);
                    bottomPanel.material.SetColor("_LabiaColor", Color.white);
                    break;
            }
            RenderCPU.IsDirty = true;
            bottomPanel.gameObject.SetActive(false);
            bottomPanel.gameObject.SetActive(true);
        }
        public override void OnDestroy()
        {
            base.OnDestroy();
        }
        private void SaveGPUtex(Texture2D tempTex, string path)
        {
            DM.ToggleGensCallBack(true);
            DM.SaveImageToFile(tempTex, path);
            RenderCPU.ResetDelegate();
        }
        private void SaveImage(string path)
        {
            RenderCPU.SetGPUTexDelegate = ((Texture2D tempTex, string MaterialSlot, string TextureSlot) =>
            {
                if (!string.IsNullOrEmpty(path))
                {
                    SaveGPUtex(tempTex, path);
                }
            });
            RenderCPU.DecalPanels = new List<DecalPanel>
            {
                //HINT: If you add the DecalPanels list you would get the blended output.
                currentDecal
            };
            DM.ToggleNipsCallBack(false);
            DM.ToggleGensCallBack(false);
            DM.StartCoroutine(RenderCPU.ApplyChanges());
        }
    }
    public class GenQueuedImage : ImageLoaderThreaded.QueuedImage
    {
        public string region;
        public string decal;
    }
}
//*** SourceCombiner -> original file Converters.cs ***
namespace VAM_Decal_Maker
{
    public static class Converters
    {
        public static Color RGBIntToFloat(int r, int g, int b)
        {
            float R = (float)r / 255;
            float G = (float)g / 255;
            float B = (float)b / 255;
            return new Color(R, G, B, 1);
        }
        public static Color HSVToRGB(HSVColor hsv)
        {
            return Color.HSVToRGB(hsv.H, hsv.S, hsv.V);
        }
        public static Color HSVToRGB(JSONStorableColor HSVToRGB)
        {
            HSVColor hsv = HSVToRGB.val;
            return Color.HSVToRGB(hsv.H, hsv.S, hsv.V);
        }
        //need to turn our texture and mat enums into VAM equiv strings
        public static string FakeEnumToVAMName(string fakeEnum)
        {
            switch (fakeEnum)
            {
                default:
                case MatSlotEnum.DecalTex:
                    return "Decal";
                case MatSlotEnum.MainTex:
                    return "Diffuse";
                case MatSlotEnum.SpecTex:
                    return "Specular";
                case MatSlotEnum.GlossTex:
                    return "Gloss";
                case MatSlotEnum.BumpMap:
                    return "Normal";
                case BodyRegionEnum.Face:
                    return "face";
                case BodyRegionEnum.Limbs:
                    return "limbs";
                case BodyRegionEnum.Torso:
                    return "torso";
                case BodyRegionEnum.Genitals:
                    return "genitals";
            }
        }
    }
}
//*** SourceCombiner -> original file GpuTextureData.cs ***
namespace VAM_Decal_Maker.Source.Helpers
{
    public class GpuTextureData : MonoBehaviour
    {
        public DAZMergedSkinV2 _dazSkin { get; private set; }
        public bool finished { get; private set; } = false;
        public Texture[] gpuDecalArray;
        private Texture[] gpuSpecArray;
        private Texture[] gpuGlossArray;
        private Texture[] gpuDiffuseArray;
        private Texture[] gpuNormalArray;
        private Decal_Maker DM;
        Dictionary<string, Dictionary<string, Texture2D>> ConvertedNormalTextures = new Dictionary<string, Dictionary<string, Texture2D>>();
        public GpuTextureData(Decal_Maker DM, DAZMergedSkinV2 dazSkin) 
        {   
            this.DM = DM;
            DM.OnDestroyAction += OnDestroy;
            _dazSkin = dazSkin;
            StoreGPUMats();
            finished = true;
        }
        private void StoreGPUMats()
        {
            gpuDecalArray = new Texture[_dazSkin.GPUmaterials.Length];
            gpuSpecArray = new Texture[_dazSkin.GPUmaterials.Length];
            gpuGlossArray = new Texture[_dazSkin.GPUmaterials.Length];
            gpuDiffuseArray = new Texture[_dazSkin.GPUmaterials.Length];
            gpuNormalArray = new Texture[_dazSkin.GPUmaterials.Length];
            for (int i = 0; i < _dazSkin.GPUmaterials.Length; i++)
            {
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.MainTex))
                    gpuDiffuseArray[i] = _dazSkin.GPUmaterials[i].GetTexture(MatSlotEnum.MainTex);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.DecalTex))
                    gpuDecalArray[i] = _dazSkin.GPUmaterials[i].GetTexture(MatSlotEnum.DecalTex);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.SpecTex))
                    gpuSpecArray[i] = _dazSkin.GPUmaterials[i].GetTexture(MatSlotEnum.SpecTex);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.GlossTex))
                    gpuGlossArray[i] = _dazSkin.GPUmaterials[i].GetTexture(MatSlotEnum.GlossTex);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.BumpMap))
                    gpuNormalArray[i] = _dazSkin.GPUmaterials[i].GetTexture(MatSlotEnum.BumpMap);
            }
        }
        public void RestoreGPUMats()
        {   //why not use .GPUmaterials[i] = DazSkinv2.dazMesh.materials[i];
            for (int i = 0; i < _dazSkin.GPUmaterials.Length; i++)
            {
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.MainTex))
                    _dazSkin.GPUmaterials[i].SetTexture(MatSlotEnum.MainTex, gpuDiffuseArray[i]);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.DecalTex))
                    _dazSkin.GPUmaterials[i].SetTexture(MatSlotEnum.DecalTex, gpuDecalArray[i]);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.SpecTex))
                    _dazSkin.GPUmaterials[i].SetTexture(MatSlotEnum.SpecTex, gpuSpecArray[i]);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.GlossTex))
                    _dazSkin.GPUmaterials[i].SetTexture(MatSlotEnum.GlossTex, gpuGlossArray[i]);
                if (_dazSkin.GPUmaterials[i].HasProperty(MatSlotEnum.BumpMap))
                    _dazSkin.GPUmaterials[i].SetTexture(MatSlotEnum.BumpMap, gpuNormalArray[i]);
            }
        }
        public Texture2D GetOriginalGPUTexture(int id, string MaterialSlot)
        {
            switch (MaterialSlot)
            {
                case MatSlotEnum.MainTex:
                case MatSlotEnum.DecalTex:
                    return (Texture2D)gpuDiffuseArray[id];
                case MatSlotEnum.SpecTex:
                    return (Texture2D)gpuSpecArray[id];
                case MatSlotEnum.GlossTex:
                    return (Texture2D)gpuGlossArray[id];
                case MatSlotEnum.BumpMap:
                    return (Texture2D)gpuNormalArray[id];
            }
            return null;
        }
        public void RestoreGPUMatbyID(int id, string MaterialSlot)
        {
            switch (MaterialSlot)
            {
                case MatSlotEnum.DecalTex:
                    if (_dazSkin.GPUmaterials[id].HasProperty(MatSlotEnum.DecalTex))
                        _dazSkin.GPUmaterials[id].SetTexture(MaterialSlot, gpuDecalArray[id]);
                    break;
                case MatSlotEnum.SpecTex:
                    if (_dazSkin.GPUmaterials[id].HasProperty(MatSlotEnum.SpecTex))
                        _dazSkin.GPUmaterials[id].SetTexture(MaterialSlot, gpuSpecArray[id]);
                    break;
                case MatSlotEnum.GlossTex:
                    if (_dazSkin.GPUmaterials[id].HasProperty(MatSlotEnum.GlossTex))
                        _dazSkin.GPUmaterials[id].SetTexture(MaterialSlot, gpuGlossArray[id]);
                    break;
                case MatSlotEnum.BumpMap:
                    if (_dazSkin.GPUmaterials[id].HasProperty(MatSlotEnum.BumpMap))
                        _dazSkin.GPUmaterials[id].SetTexture(MaterialSlot, gpuNormalArray[id]);
                    break;
            }
        }
        public void StoreNormalDisplayTex(string MaterialSlot, string bodyRegion, Texture2D texture)
        {   Dictionary<string, Texture2D> temp = new Dictionary<string, Texture2D>();
            temp[bodyRegion] = texture;
            ConvertedNormalTextures[MaterialSlot] = temp;
        }
        public Texture2D GetWorkingTexture(string materialSlot, string bodyRegion)
        {
            Dictionary<string, Texture2D> textures;
            Texture2D texture;
            if (ConvertedNormalTextures.TryGetValue(materialSlot, out textures) && textures.TryGetValue(bodyRegion, out texture))
            {
                return texture;
            }
            return null;
        }
        public virtual void OnDestroy()
        {
            DM.OnDestroyAction -= OnDestroy;
            foreach (var Value in ConvertedNormalTextures.Values.ToList())
            {
                foreach (Texture texture in Value.Values.ToList())
                {
                    GameObject.Destroy(texture);
                    Resources.UnloadAsset(texture);
                }
            }
        }
    }
}
//*** SourceCombiner -> original file Locaization.cs ***
namespace VAM_Decal_Maker.Helpers
{
    public static class Localization
    {
        private static CultureInfo ci = CultureInfo.InstalledUICulture;
        public static string Lcs(string eng)
        {
            string locale = ci.Name;
            Dictionary<string, string> strings;
            locales.TryGetValue(locale, out strings);
            strings?.TryGetValue(eng, out eng);
            return eng;
        }
        private readonly static Dictionary<string, Dictionary<string, string>> locales = new Dictionary<string, Dictionary<string, string>> { { "en-US", en_EN } };
        private static readonly Dictionary<string, string> en_EN = new Dictionary<string, string>()
        {
            { "Please add this plugin to a PERSON atom.", "Please add this plugin to a PERSON atom."  },
            { "Clear Everything", "Clear Everything"},
            { "USE Prefab", "USE Prefab"},
            { "Reset Texture", "Reset Texture"},
            { "Edit Textures","Edit Textures"},
            { "Load Preset", "Load Preset"},
            { "Save Preset", "Save Preset"},
        };
    }
}
//*** SourceCombiner -> original file ShaderData.cs ***
namespace VAM_Decal_Maker.Source.Helpers
{
    public class ShaderData
    {
        private Shader _DecalShader;
        private Shader _DecalShaderUI;
        private Shader _SpecGlossShader;
        private Shader _NormShader;
        private Shader _NormRNMShader;
        private Shader _PackedNormShader;
        private Shader _NormalShaderUI;
        private Shader _SpecGlossShaderUI;
        private Shader _GenitalMakerShaderUI;
        public bool _ShadersLoaded { get; private set; }
        public ShaderData(string path) 
        {
            //use vam's built in loader for assets then load shader from bundle instead of smuggling them in as a unity Atom
            AssetLoader.AssetBundleFromFileRequest req = new AssetLoader.AssetBundleFromFileRequest()
            {
                path = path, // PathHelper.GetPackagePath(this) + "Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/chokpahi-decal.assetbundle",
                callback = LoadAssetBundle,
            };
            AssetLoader.QueueLoadAssetBundleFromFile(req);
        }
        private void LoadAssetBundle(MeshVR.AssetLoader.AssetBundleFromFileRequest request)
        {
            if (request.assetBundle == null)
            {
                SuperController.LogError("Decal Maker was unable to load chokpahi-decal.assetbundle");
                return;
            }
            string path = "assets/_shaders/";
            _SpecGlossShader = request.assetBundle.LoadAsset<Shader>(path + "SpecGloss/unlit-specular2.shader");
            _NormShader = request.assetBundle.LoadAsset<Shader>(path + "Normal/unlit-normalmap2.shader");
            _NormRNMShader = request.assetBundle.LoadAsset<Shader>(path + "Normal/unlit-normalmapRNM.shader");
            _PackedNormShader = request.assetBundle.LoadAsset<Shader>(path + "Normal/unlit-packednormalmap.shader");
            _NormalShaderUI = request.assetBundle.LoadAsset<Shader>(path + "Normal/custom-ui-normalmapoverlay.shader");
            _GenitalMakerShaderUI = request.assetBundle.LoadAsset<Shader>(path + "unlit-genitalmaker2.shader");
            _DecalShader = request.assetBundle.LoadAsset<Shader>(path + "Decal/unlit-decal5.shader");
            _DecalShaderUI = request.assetBundle.LoadAsset<Shader>(path + "Decal/unlit-decal5UI.shader");
            if (_SpecGlossShader && _NormShader && _PackedNormShader && _DecalShader && _NormalShaderUI && _GenitalMakerShaderUI && _NormRNMShader)
            {
                _ShadersLoaded = true;
            }
        }
        public Shader GetShader(string shaderEnum)
        { 
            switch (shaderEnum) 
            { 
                case ShaderEnum.DecalShader:
                    return _DecalShader;
                case ShaderEnum.SpecGlossShader:
                    return _SpecGlossShader;
                case ShaderEnum.NormShader:
                    return _NormShader;
                case ShaderEnum.PackedNormShader:
                    return _PackedNormShader;
                case ShaderEnum.DecalShaderUI:
                    return _DecalShaderUI;
                case ShaderEnum.NormalShaderUI:
                    return _NormalShaderUI;
                case ShaderEnum.SpecularShaderUI:
                    return _SpecGlossShaderUI;
                case ShaderEnum.GenitalMakerShaderUI:
                    return _GenitalMakerShaderUI;
                case ShaderEnum.NormShaderRNM:
                    return _NormRNMShader;
                default: return null;
            }       
        }
    }
}
//*** SourceCombiner -> original file RenderPanelCPU.cs ***
namespace VAM_Decal_Maker
{
    public class RenderPanelCPU : RenderPanelDecal
    {
        public RenderPanelCPU(Decal_Maker DM, string MaterialSlot, string TextureSlot) : base(DM, MaterialSlot, TextureSlot)
        {
        }
        //Use Slow CPU blend to allow texture saving. 
        public override bool GpuCombine(Texture baseTex, Material material, bool linear = false)
        {
            int w = baseTex.width;
            int h = baseTex.height;
            RenderTextureReadWrite renderTexConversion = RenderTextureReadWrite.sRGB;
            if (linear)
            {
                renderTexConversion = RenderTextureReadWrite.Linear;
            }
            RenderTexture tmp = RenderTexture.GetTemporary(w, h, 0, RenderTextureFormat.ARGB32, renderTexConversion);        //tmp.antiAliasing = 8;                                                                                                                           //Backup the currently set RenderTexture
            RenderTexture previous = RenderTexture.active;
            Graphics.Blit(baseTex, tmp, material);
            RenderTexture.active = tmp;
            tempTexture.ReadPixels(new Rect(0, 0, w, h), 0, 0, false);
            tempTexture.Apply();
            // Reset the active RenderTexture
            RenderTexture.active = previous;
            RenderTexture.ReleaseTemporary(tmp);
            return true;
        }
    }
}
//*** SourceCombiner -> original file TextureIndex.cs ***
namespace VAM_Decal_Maker
{
    internal static class TextureIndex
    {
        private static readonly Dictionary<string, int[]> femaleTextureIndex = new Dictionary<string, int[]>()
        {
            {BodyRegionEnum.Torso, new int[]{15,18,19,20,21,27,29}},
            {BodyRegionEnum.Face, new int[]{2,5,11} },
            {BodyRegionEnum.Limbs, new int[]{0,12,14,16,17,22,23}},
            {BodyRegionEnum.Genitals, new int[]{28}},
            {BodyRegionEnum.EyeReflection, new int[]{1}},
            {BodyRegionEnum.EyePupil, new int[]{4}},
            {BodyRegionEnum.EyeIris, new int[]{8}},
            {BodyRegionEnum.EyeCornea, new int[]{10}},
            {BodyRegionEnum.EyeSclera, new int[]{13}}
        };
        private static readonly Dictionary<string, int[]> maleTextureIndex = new Dictionary<string, int[]>()
        {
            {BodyRegionEnum.Torso, new int[]{15,16,19,20,21,22,30,32}},
            {BodyRegionEnum.Face, new int[]{2,5,11}},
            {BodyRegionEnum.Limbs, new int[]{0,12,14,17,18,23,24}},
            {BodyRegionEnum.Genitals, new int[]{28,29}},
            {BodyRegionEnum.EyeReflection, new int[]{1}},
            {BodyRegionEnum.EyePupil, new int[]{4}},
            {BodyRegionEnum.EyeIris, new int[]{8}},
            {BodyRegionEnum.EyeCornea, new int[]{10}},
            {BodyRegionEnum.EyeSclera, new int[]{13}}
        };
        public static Dictionary<string, int[]> GetTexureDictionary(bool IsMale)
        {
            if (IsMale)
                return maleTextureIndex;
            return femaleTextureIndex;
        }
        public static int[] GetTextureIDs(string region, bool IsMale)
        {
            if (IsMale)
                return maleTextureIndex[region];
            return femaleTextureIndex[region];
        }
        public static int GetFirstTextureID(string region, bool IsMale)
        {
            if (IsMale)
                return maleTextureIndex[region][0];
            return femaleTextureIndex[region][0];
        }
    }
}
//*** SourceCombiner -> original file RenderPanelGenital.cs ***
namespace VAM_Decal_Maker
{
    public class RenderPanelGenital : RenderPanelCPU
    {
        private Material SourceMaterial;
        public RenderPanelGenital(Decal_Maker DM, string MaterialSlot, string TextureSlot, Material mat) : base(DM, MaterialSlot, TextureSlot)
        {
            material = mat;
        }
        public void ResetDelegate()
        {
            SetGPUTexDelegate = SetGPUTexture;
        }
        public override IEnumerator ApplyChanges()
        {
            //ZeroMaterial();
            bool linear = false;
            yield return GpuCombine(clearTex, material, linear);
            SetGPUTexDelegate(tempTexture, MaterialSlot, TextureSlot);
            //Only un-flag IsDirty if no updates happened while processing.
            if (dirtyTimeStart == dirtyTime)
            {
                IsDirty = false;
            }
            Processing = false;
        }
    }
}
//*** SourceCombiner -> original file UIWidgets.cs ***
namespace VAM_Decal_Maker
{
    public static class UIWidgets
    {
        public static UIDynamicPopup CreatePopup(Decal_Maker DM, Transform parent, JSONStorableStringChooser jsc = null)
        {
            Transform popupPrefabType = GameObject.Instantiate(DM.manager.configurableScrollablePopupPrefab);
            popupPrefabType.SetParent(parent, false);
            popupPrefabType.localPosition = Vector3.zero;
            UIDynamicPopup dynamicPopupType = popupPrefabType.GetComponent<UIDynamicPopup>();
            dynamicPopupType.name = "dynamicPop";
            if (jsc != null)
            {
                jsc.popup = dynamicPopupType.popup;
            }
            return dynamicPopupType;
        }
        public static UIDynamicColorPicker CreateColorPicker(Decal_Maker DM, Transform parent, JSONStorableColor jcolor, bool isStorable = false)
        {
            Transform colorPickerPrefab = GameObject.Instantiate(DM.manager.configurableColorPickerPrefab);
            colorPickerPrefab.SetParent(parent, false);
            colorPickerPrefab.localPosition = Vector3.zero;
            UIDynamicColorPicker colorPickerDynamic = colorPickerPrefab.GetComponent<UIDynamicColorPicker>();
            colorPickerDynamic.showLabel = false;
            jcolor.colorPicker = colorPickerDynamic.colorPicker;
            if (isStorable)
                jcolor.isStorable = false;
            return colorPickerDynamic;
        }
        public static UIDynamicSlider CreateSlider(Decal_Maker DM, Transform parent, JSONStorableFloat action, int min = 0, int max = 1, int startValue = 1, string title = "", float sliderAlpha = 0.1f)
        {
            Transform sliderPrefab = GameObject.Instantiate(DM.manager.configurableSliderPrefab);
            sliderPrefab.SetParent(parent, false);
            sliderPrefab.localPosition = Vector3.zero;
            UIDynamicSlider sliderDynamic = sliderPrefab.GetComponent<UIDynamicSlider>();
            sliderDynamic.transform.localPosition = new Vector2(0, -80);
            sliderDynamic.quickButtonsEnabled = false;
            sliderDynamic.rangeAdjustEnabled = false;
            sliderDynamic.defaultButtonEnabled = false;
            Image sliderBackground = sliderDynamic.GetComponentsInChildren<Image>().Where(x => x.name == "Panel").First();
            Color c = sliderBackground.color;
            c.a = sliderAlpha;
            sliderBackground.color = c;
            action.slider = sliderDynamic.slider;
            //sliderDynamic.slider.onValueChanged.AddListener(action);
            sliderDynamic.slider.minValue = min;
            sliderDynamic.slider.maxValue = max;
            sliderDynamic.slider.value = startValue;
            sliderDynamic.label = title;
            sliderDynamic.labelText.transform.localPosition += new Vector3(400, 0, 0);
            RectTransform fill = sliderDynamic.slider.fillRect;
            fill.sizeDelta += new Vector2(0, 20);
            return sliderDynamic;
        }
        public static UIDynamicButton CreateVAMButtom(Decal_Maker DM, Transform parent, string label)
        {
            Transform buttonPrefab = GameObject.Instantiate(DM.manager.configurableButtonPrefab.transform);
            UIDynamicButton uIDynamicButton = buttonPrefab.GetComponent<UIDynamicButton>();
            if (uIDynamicButton != null)
            {
                uIDynamicButton.label = label;
            }
            uIDynamicButton.transform.SetParent(parent, false);
            return uIDynamicButton;
        }
    }
}
//*** SourceCombiner -> original file UserConfirmPanel.cs ***
namespace VAM_Decal_Maker
{
    public class UserConfirmPanel : PanelBase
    {
        private Text promptText;
        private Image BackGround;
        private MyButton confirmButton;
        private MyButton confirmCleanButton;
        private MyButton cancelButton;
        private JSONClass SavedAppData;
        public UserConfirmPanel(Transform parent, Decal_Maker DM) : base(DM)
        {
            gameObject.transform.SetParent(parent, false);
            SetLayout(500, 200);
            BackGround = CreatePanelBackground(500, 200, Color.white);
            TextPanel textPanel = new TextPanel(gameObject, new Vector2(40, 40), "User choice Panel")
            {
                alignment = TextAnchor.UpperLeft,
                color = Color.black,
                fontSize = 30,
                fontStyle = FontStyle.Bold,
                text = "The Appearance you just loaded also has DecalMaker settings.\n\nDo you want to apply these Settings to DecalMaker",
                blocksRaycasts = false,
                sizeDelta = new Vector2(400, 200),
            };
            confirmButton = new MyButton("Add to Existing\nDecals", Color.green, gameObject.transform);
            confirmCleanButton = new MyButton("Clear Existing Decals\nThen Add this Preset", Color.yellow, gameObject.transform);
            cancelButton = new MyButton("Do not Add", Color.red, gameObject.transform);
            confirmButton.button.onClick.AddListener(confirmButtonClick);
            confirmCleanButton.button.onClick.AddListener(confirmCleanButtonClick);
            cancelButton.button.onClick.AddListener(cancelButtonClick);
            SetActive(false);       
        }
        private void confirmButtonClick()
        {
            DM._savedData = SavedAppData;
            DM.CallAction("PerformLoad");
            SetActive(false);
        }
        private void confirmCleanButtonClick()
        {
            DM._savedData = SavedAppData;
            DM.CallAction("ClearAll");
            DM.CallAction("PerformLoad");
            SetActive(false);
        }
        private void cancelButtonClick()
        {
            SavedAppData = null;
            SetActive(false);
        }
        public void SetPrompt(string prompt)
        {
            if (this.promptText != null)
            {
                this.promptText.text = prompt;
            }
        }
        private void SetActive(bool active)
        {
            gameObject.SetActive(active);
        }
        public void UpdateConfirmPanel(bool active, JSONClass appearanceData)
        { 
            SavedAppData = appearanceData;
            SetActive(active);
        }
        public override void OnDestroy()
        {
            base.OnDestroy();
            GameObject.Destroy(gameObject);
        }
    }
}
//*** SourceCombiner -> original file DecalPanel.cs ***
namespace VAM_Decal_Maker
{
    public class DecalPanel : PanelBase
    {
        public ImagePanel ImagePanel { get; set; }
        public MyButton Up { get; private set; }
        public MyButton Down { get; private set; }
        public MyButton Open { get; private set; }
        public MyButton Close { get; private set; }
        public MyButton Copy { get; private set; }
        public JSONStorableColor jcolor { get; private set; }
        public JSONStorableFloat sliderJSF { get; private set; }
        public UIDynamicSlider sliderDynamic { get; private set; }
        public string linkedPanelID { get { return linkJSSC.val; } set { linkJSSC.val = value; } }
        public Action<string> LastDir;
        private string _imagePath = "";
        public string ImagePathText { get { return _imagePath; } set { _imagePath = value; texturePathTextPanel.text = FormattPathText(value); } }
        private string _randomName;
        public string RandomName
        {
            get
            {
                if (_randomName == null)
                {
                    return "ERROR!!!";
                }
                return _randomName;
            }
            set
            {
                if (randomNameTextPanel != null)
                    randomNameTextPanel.text = value;
                _randomName = value;
            }
        }
        private TextPanel texturePathTextPanel;
        private TextPanel randomNameTextPanel;
        private static List<string> linkedLayerChoices = new List<string>() { "*", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" };
        private JSONStorableAction videoPlayPauseJSA;
        private JSONStorableFloat videoFrameJSF;
        private JSONStorableFloat videoTimeJSF;
        private JSONStorableStringChooser linkJSSC;
        private JSONStorableUrl imageJSURL;
        public JSONStorableFloat TextureScaleJSF;
        public JSONStorableFloat TextureRotationJSF;
        private JSONStorableFloat TextureTranslateXJSF;
        private JSONStorableFloat TextureTranslateYJSF;
        private JSONStorableFloat TextureCenterXJSF;
        private JSONStorableFloat TextureCenterYJSF;
        Action<float, bool> SliderAction;
        public Vector4 TextureTranAndCenter { get { return GetTextureTranslation(); } set { SetTextureTranslation(value); } }
        public Vector2 TextureCenter { get { return new Vector2(TextureCenterXJSF.val, TextureCenterYJSF.val); } set { SetTextureCenter(value); } }
        public Vector2 TextureTranslate { get { return new Vector2(TextureTranslateXJSF.val, TextureTranslateYJSF.val); } set { SetTextureTranslate(value); } }
        private void SetTextureTranslate(Vector2 value)
        {
            TextureTranslateXJSF.valNoCallback = value.x;
            TextureTranslateYJSF.valNoCallback = value.y;
            JSONStorablesUpdate(0);
        }
        private void SetTextureCenter(Vector2 center)
        {
            TextureCenterXJSF.valNoCallback = center.x;
            TextureCenterYJSF.valNoCallback = center.y;
            JSONStorablesUpdate(0);
        }
        private Vector4 GetTextureTranslation()
        {
            float x = TextureTranslateXJSF.val;
            float y = TextureTranslateYJSF.val;
            float z = TextureCenterXJSF.val;
            float w = TextureCenterYJSF.val;
            return new Vector4(x, y, z, w);
        }
        private void SetTextureTranslation(Vector4 translation)
        {
            TextureTranslateXJSF.valNoCallback = translation.x;
            TextureTranslateYJSF.valNoCallback = translation.y;
            TextureCenterXJSF.valNoCallback = translation.z;
            TextureCenterYJSF.valNoCallback = translation.w;
            //trigger update
            JSONStorablesUpdate(0);
        }
        private void CoreEvents(object o, PanelEventArgs e)
        {
        }
        //events from image panel
        public void ImagePanelEventProcessor(object o, PanelEventArgs e)
        {
            switch (e.EventName)
            {
                case EventEnum.ImagePanelVidePrepared:
                    VideoLoaded(e.videoPlayer);
                    break;
                case EventEnum.ImagePanelImageLoad:
                    //Deregister video controls
                    if (DM.GetAction(videoPlayPauseJSA.name) != null)
                    {
                        DeregisterAction(videoPlayPauseJSA);
                        DeregisterFloat(videoFrameJSF);
                        DeregisterFloat(videoTimeJSF);
                    }
                    break;
                case EventEnum.ImagePanelVideoLoad:
                    //register video controls
                    if (DM.GetAction(videoPlayPauseJSA.name) == null)
                    {
                        RegisterAction(videoPlayPauseJSA);
                        RegisterFloat(videoFrameJSF, false);
                        RegisterFloat(videoTimeJSF, false);
                    }
                    break;
            }
            if (e.EventName == EventEnum.ImagePanelVidePrepared)
            {
            }
            //add reference to this panel and pass on. Manager Panel handles operations
            e.DecalPanel = this;
            RaiseCoreEvent(this, e);
        }
        private void JSONStorablesUpdate(float f)
        {
            RaiseCoreEvent(this, new PanelEventArgs(EventEnum.DecalPanelTextureMove, this));
        }
        public override void OnDestroy()
        {
            UnRegisterForCoreEvents(CoreEvents);
            ImagePanel.ImagePanelUpdate -= ImagePanelEventProcessor;
            //ImagePanel.OnDestroy();
            base.OnDestroy();
        }
        public DecalPanel(Transform anchor, float width, float height, Color? color, Decal_Maker DM, string RandomName, string MaterialSlot, string TextureSlot, bool IsNormalMap = false, bool linear = false) : base(DM)
        {
            gameObject.transform.SetParent(anchor, false);
            this.MaterialSlot = MaterialSlot;
            this.TextureSlot = TextureSlot;
            this.IsNormalMap = IsNormalMap;
            this.linear = linear;
            this.RandomName = RandomName;
            //basePanel
            panelImage = gameObject.AddComponent<Image>();
            panelImage.material = new Material(Shader.Find("UI/Default-Overlay"));
            panelImage.color = color ?? new Color(0, 0, 0, 0f);
            panelImage.rectTransform.sizeDelta = new Vector2(width, height);
            //Image panel
            GameObject imageObject = new GameObject("ImagePanel");
            imageObject.transform.SetParent(gameObject.transform, false);
            ImagePanel = new ImagePanel(DM, null, TextureSlot, MaterialSlot, IsNormalMap, linear);
            ImagePanel.gameObject.transform.SetParent(gameObject.transform, false);
            ImagePanel.gameObject.transform.localPosition = new Vector3(panelImage.rectTransform.rect.xMax - ImagePanel.rectTransform.rect.xMax - 10, 0, 0);
            //register for event, this is the local image panels events
            ImagePanel.ImagePanelUpdate += ImagePanelEventProcessor;
            RegisterForCoreEvents(CoreEvents);
            //create name and slider
            //must be before text and color selector so it layers properly
            AddSlider();
            GameObject colorObject = new GameObject("ColorPanel");
            colorObject.transform.SetParent(gameObject.transform, false);
            colorObject.transform.localScale = new Vector3(.55f, .55f, .55f);
            colorObject.transform.localPosition = new Vector2(-350, 50);
            Image colorImage = colorObject.AddComponent<Image>();
            colorImage.material = new Material(Shader.Find("UI/Default-Overlay"));
            colorImage.color = new Color(0, 1, 1, 0f);
            colorImage.rectTransform.sizeDelta = new Vector2(600, 300);
            colorImage.transform.localPosition = new Vector2(-350, 50);
            HSVColor hsvc = HSVColorPicker.RGBToHSV(1f, 1f, 1f);
            jcolor = new JSONStorableColor(CreateJSN("Color"), hsvc, UnifiedImagePanelColor);
            UIDynamicColorPicker colorPickerDynamic = UIWidgets.CreateColorPicker(DM, colorImage.transform, jcolor);
            RegisterColor(jcolor, false);
            videoPlayPauseJSA = new JSONStorableAction(CreateJSN("Play-Pause"), VideoPlayPause);
            videoFrameJSF = new JSONStorableFloat(CreateJSN("Step to Frame"), 0, VideoPlaySeekFrame, 0, 0);
            videoTimeJSF = new JSONStorableFloat(CreateJSN("Step to Time"), 0, VideoPlaySeekTime, 0, 0);
            //buttons can not parent one another, child buttons set hit detection to parent buttons leading to all being lit
            //https://answers.unity.com/questions/1783936/a-button-inside-of-a-button-is-highlighting-parent.html
            Vector2 buttonSize = new Vector2(60, 60);
            Copy = new MyButton("", new Color(.156f, .746f, .176f), gameObject.transform, new Vector3(-165, 50, 0), buttonSize);
            Texture2D CopyIcon = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/Copy-Icon.jpg");
            Copy.SetIcon(CopyIcon);
            Open = new MyButton("", new Color(.7f, .7f, .7f), gameObject.transform, new Vector3(-100, 50, 0), buttonSize);
            Texture2D OpenIcon = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/Open-Icon.jpg");
            Open.SetIcon(OpenIcon);
            Up = new MyButton("", new Color(0.9f, 0.6f, 0.1f), gameObject.transform, new Vector3(-35, 50, 0), buttonSize);
            Texture2D UpIcon = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/Up-Icon.jpg");
            Up.SetIcon(UpIcon);
            Down = new MyButton("", new Color(0.1f, 0.6f, 0.8f), gameObject.transform, new Vector3(30, 50, 0), buttonSize);
            Texture2D DownIcon = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/Down-Icon.jpg");
            Down.SetIcon(DownIcon);
            Close = new MyButton("", new Color(0.6f, 0, 0, 1), gameObject.transform, new Vector3(180, 50, 0), buttonSize);
            Texture2D CloseIcon = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/Close-Icon.jpg");
            Close.SetIcon(CloseIcon);
            //Panel Name Text
            randomNameTextPanel = new TextPanel(gameObject, Vector3.zero, "")
            {
                text = RandomName,
                color = new Color(1 - panelImage.color.r, 1 - panelImage.color.g, 1 - panelImage.color.b),
                fontSize = 60,
                fontStyle = FontStyle.Bold,
                alignment = TextAnchor.UpperCenter,
                sizeDelta = new Vector2(width, height),
            };
            //Texture Path Text
            texturePathTextPanel = new TextPanel(gameObject, new Vector2(40, 40), "Path Panel")
            {
                alignment = TextAnchor.LowerLeft,
                color = Color.black,
                fontSize = 30,
                fontStyle = FontStyle.Bold,
                text = "Click White Square to select image.-->",
                blocksRaycasts = false,
                sizeDelta = new Vector2(width, height),
            };
            Up.button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.DecalPanelButtonUP, this));
            });
            Down.button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.DecalPanelButtonDOWN, this));
            });
            Close.button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.DecalPanelButtonCLOSE, this));
            });
            Open.button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.DecalPanelButtonAdd, this));
            });
            Copy.button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.DecalPanelButtonCOPY, this));
            });
            linkJSSC = new JSONStorableStringChooser("LinkpanelSelection", linkedLayerChoices, "*", "", (string x) => { RaiseCoreEvent(this, new PanelEventArgs(EventEnum.DecalPanelLinkChanged, this)); });
            PopupPanel popupPanel = new PopupPanel(DM, linkJSSC);
            popupPanel.transform.SetParent(transform, false);
            popupPanel.transform.localPosition = new Vector2(95, 50);
            imageJSURL = new JSONStorableUrl(CreateJSN("ReplaceImage"), string.Empty, (string path) => { RestoreImageFromJSON(path); });
            TextureScaleJSF = new JSONStorableFloat(CreateJSN("texScale"), 1, JSONStorablesUpdate, -10, 10, false);
            TextureRotationJSF = new JSONStorableFloat(CreateJSN("texRot"), 0, JSONStorablesUpdate, -360, 360, false);
            TextureTranslateXJSF = new JSONStorableFloat(CreateJSN("textTransX"), 0, JSONStorablesUpdate, -2, 2, false);
            TextureTranslateYJSF = new JSONStorableFloat(CreateJSN("textTransY"), 0, JSONStorablesUpdate, -2, 2, false);
            TextureCenterXJSF = new JSONStorableFloat(CreateJSN("textCnterX"), 0.5f, JSONStorablesUpdate, 0, 1, false);
            TextureCenterYJSF = new JSONStorableFloat(CreateJSN("textCnterY"), 0.5f, JSONStorablesUpdate, 0, 1, false);
            RegisterUrl(imageJSURL, false);
            RegisterFloat(TextureScaleJSF, false);
            RegisterFloat(TextureRotationJSF, false);
            RegisterFloat(TextureTranslateXJSF, false);
            RegisterFloat(TextureTranslateYJSF, false);
        }
        //copy source to target, name remains unique
        public void CopyDataToTargetPanel(DecalPanel target, bool fullCopy = true)
        {
            target.linkJSSC.SetVal(this.linkJSSC.val);
            target.jcolor.valNoCallback = this.jcolor.val;
            target.sliderDynamic.slider.value = this.sliderDynamic.slider.value;
            if (fullCopy)
            {
                target.BrowserCallBack(this.ImagePathText);
                target.TextureScaleJSF.valNoCallback = TextureScaleJSF.val;
                target.TextureRotationJSF.valNoCallback = TextureRotationJSF.val;
                target.TextureTranslateXJSF.valNoCallback = TextureTranslateXJSF.val;
                target.TextureTranslateYJSF.valNoCallback = TextureTranslateYJSF.val;
                target.TextureCenterXJSF.valNoCallback = TextureCenterXJSF.val;
                target.TextureCenterYJSF.valNoCallback = TextureCenterYJSF.val;
            }
        }
        public void CopyDataFromTargetPanel(DecalPanel target, bool fullCopy = true)
        {
            this.linkJSSC.SetVal(target.linkJSSC.val);
            this.jcolor.valNoCallback = target.jcolor.val;
            this.sliderJSF.valNoCallback = target.sliderJSF.val;
            ImagePanel.SetMaterialColor(Converters.HSVToRGB(jcolor.val), false);
            SliderAction(target.sliderJSF.val, false);
            if (fullCopy)
            {
                BrowserCallBack(target.ImagePathText);
                TextureScaleJSF.valNoCallback = target.TextureScaleJSF.val;
                TextureRotationJSF.valNoCallback = target.TextureRotationJSF.val;
                TextureTranslateXJSF.valNoCallback = target.TextureTranslateXJSF.val;
                TextureTranslateYJSF.valNoCallback = target.TextureTranslateYJSF.val;
                TextureCenterXJSF.valNoCallback = target.TextureCenterXJSF.val;
                TextureCenterYJSF.valNoCallback = target.TextureCenterYJSF.val;
            }
        }
        #region Video
        public void VideoLoaded(VideoPlayer videoPlayer)
        {
            try
            {
                ulong frames = videoPlayer.frameCount;
                double time = frames / videoPlayer.frameRate;
                float seconds = (float)time;
                videoFrameJSF.max = frames;
                videoTimeJSF.max = seconds;
            }
            catch (Exception e)
            {
                SuperController.LogError(e.Message);
            }
        }
        private void VideoPlaySeekTime(float seconds)
        {
            ImagePanel.videoPlayer.time = seconds;
        }
        private void VideoPlaySeekFrame(float frame)
        {
            int f = Mathf.RoundToInt(frame);
            ImagePanel.videoPlayer.frame = f;
        }
        private void VideoPlayPause()
        {
            if (ImagePanel.videoPlayer.isPlaying)
            {
                ImagePanel.videoPlayer.Pause();
            }
            else
            {
                ImagePanel.videoPlayer.Play();
            }
        }
        private string CreateJSN(string prefix = null)
        {
            if (string.IsNullOrEmpty(prefix))
                return string.Format("{0}{1}{2}", TextureSlot, MaterialSlot, RandomName);
            return string.Format("{0}_{1}{2}{3}", prefix, TextureSlot, MaterialSlot, RandomName);
        }
        #endregion
        private void AddSlider()
        {
            if (IsNormalMap)
            {
                SliderAction = UnifiedImagePanelNormal;
                sliderJSF = new JSONStorableFloat(CreateJSN("Strength"), 1, (float f)=> { SliderAction(f, true); }, -10, 10);
                sliderDynamic = UIWidgets.CreateSlider(DM, gameObject.transform, sliderJSF, -10, 10, 1, "Normal Strength");
            }
            else if (linear)
            {
                SliderAction = UnifiedImagePanelSpec;
                sliderJSF = new JSONStorableFloat(CreateJSN("Strength"), 1, (float f) => { SliderAction(f, true); }, -10, 10);
                sliderDynamic = UIWidgets.CreateSlider(DM, gameObject.transform, sliderJSF, -10, 10, 1, "Spec/Gloss Strength");
            }
            else
            {
                SliderAction = UnifiedImagePanelColor;
                sliderJSF = new JSONStorableFloat(CreateJSN("Alpha"), 1, (float f) => { SliderAction(f, true); }, 0, 1);
                sliderDynamic = UIWidgets.CreateSlider(DM, gameObject.transform, sliderJSF, 0, 1, 1, "Alpha value");
            }
            RegisterFloat(sliderJSF, false);
        }
        //Merge callbacks from slider and color picker to a color value
        private void UnifiedImagePanelColor(JSONStorableColor jColor)
        {
            UnifiedImagePanelColor(sliderJSF.val, true);
        }
        public void UnifiedImagePanelColor(float f, bool sendEvent)
        {
            Color newColor = Converters.HSVToRGB(jcolor);
            newColor.a = f;
            ImagePanel.SetMaterialColor(newColor, sendEvent);
        }
        private void UnifiedImagePanelNormal(float f, bool sendEvent)
        { 
            ImagePanel.SetNormalScale(f, sendEvent);
        }
        private void UnifiedImagePanelSpec(float f, bool sendEvent)
        {
            ImagePanel.SetSpecularScale(f, sendEvent);
        }
        public string FormattPathText(string text)
        {
            //count char back to first slash
            int lastIndex = text.LastIndexOf("/");
            if (text.Length > 55 && lastIndex >= 0)
            {
                string endText = text.Substring(lastIndex);
                //if file name is super long clip it
                if (endText.Length > 40)
                    endText = text.Substring(lastIndex, 40);
                int leftover = 55 - endText.Length + 3;
                string startText = text.Substring(0, leftover);
                text = startText + "..." + endText;
            }
            return text;
        }
        //Used to correct paths in JSON to available VAR files until VAM expands FileManagerSecure
        //this is a nasty fucking mess
        //path = image path package
        public void RestoreImageFromJSON(string path, string package = null, string selectedFile = null)
        {
            try
            {
                path = FileManagerSecure.NormalizePath(path);
                Match m;
                //VAR Path for textures with direct var ref
                if ((m = Regex.Match(path, "^(.+\\..+)\\.(.+):/(.+/)(.+)")).Success)
                {
                    //this is a packagedVAR reference use latest version
                    string varName = m.Groups[1].Value;
                    string filePath = m.Groups[3].Value;
                    string fileName = m.Groups[4].Value;
                    ShortCut sc = FileManagerSecure.GetShortCutsForDirectory(filePath).Where(x => x.package.Contains(varName) && x.isLatest).FirstOrDefault();
                    //if nothing found with this path
                    if (sc == null)
                    {
                        SuperController.LogError("Decal Maker: Texture not found: " + path);
                        return;
                    }
                    path = Regex.Replace(sc.path, "^.+/(.+\\..+\\..+)\\..+(:.+)", "$1$2/" + fileName); //removes AddonPackages/ path prefix and the .var from shortcut path
                }
                //if texture and presets are in same VAR  VAM changes all paths to SELF:
                //prefabs UI passes in a package ref
                else if ((m = Regex.Match(path, "^SELF:.+")).Success && package != null)
                {   //SELF:/Custom/Atom/Person/Textures/DecalMaker - mofmes power goo/Face/Cheeks/face04/D.png
                    path = Regex.Replace(path, "^(SELF)(:.+)", package + "$2"); //replace SELF:/ with source package
                }
                else if ((m = Regex.Match(path, "^SELF:.+")).Success && selectedFile != null)
                {
                    if ((m = Regex.Match(selectedFile, "^(.+\\..+\\..+):.+")).Success)
                    {
                        string varName = m.Groups[1].Value;
                        path = Regex.Replace(path, "^(SELF)(:.+)", varName + "$2"); //replace SELF:/ with source package
                    }
                }
                //no fing clue. We have to find it
                else if ((m = Regex.Match(path, "^SELF:.+")).Success)
                {
                    //Find the first package with this path
                    path = Regex.Replace(path, "^SELF:/(.+/)", "$1");
                    string pathWithoutFileName = Regex.Replace(path, "^(.+/).+", "$1");
                    List<ShortCut> shortCuts = FileManagerSecure.GetShortCutsForDirectory(pathWithoutFileName);
                    foreach (ShortCut s in shortCuts)
                    {
                        if (s.isLatest && s.package != "" && s.package != "AddonPackages Flattened" && s.package != "AddonPackages Filtered")
                        {
                            List<string> files = GetFilesAtPathRecursive(s.path, null);
                            foreach (string f in files)
                            {
                                string t = FileManagerSecure.NormalizePath(f);
                                if (t.Contains(path))
                                {
                                    path = t;
                                    break;
                                }
                            }
                        }
                    }
                }
                BrowserCallBack(path);
            }
            catch (Exception)
            {
                SuperController.LogError("Decal Maker: Unable to Resove Texture Path");
                //SuperController.LogError(e.InnerException.StackTrace);
            }
        }
        public void BrowserCallBack(string path)
        {
            if (string.IsNullOrEmpty(path))
            {
                ImagePathText = "";
            }
            else
            {
                string dir = FileManagerSecure.GetDirectoryName(path);
                DM.SetUrlParamValue("LastImageDir", dir);
                ImagePathText = path;
                ImagePanel.LoadResourceFile(path);
            }
        }
        public JSONClass Save()
        {
            JSONClass decalSaveJSON = new JSONClass();
            decalSaveJSON["H"].AsFloat = jcolor.val.H;
            decalSaveJSON["S"].AsFloat = jcolor.val.S;
            decalSaveJSON["V"].AsFloat = jcolor.val.V;
            decalSaveJSON["Alpha"].AsFloat = sliderJSF.val;
            decalSaveJSON["RandomName"] = RandomName;
            decalSaveJSON["LinkID"] = linkedPanelID;
            decalSaveJSON["Scale"].AsFloat = TextureScaleJSF.val;
            decalSaveJSON["Rotation"].AsFloat = TextureRotationJSF.val;
            decalSaveJSON["T_CPT-X"].AsFloat = TextureTranAndCenter.x;
            decalSaveJSON["T_CPT-Y"].AsFloat = TextureTranAndCenter.y;
            decalSaveJSON["T_CPT-Z"].AsFloat = TextureTranAndCenter.z;
            decalSaveJSON["T_CPT-W"].AsFloat = TextureTranAndCenter.w;
            //SuperController.LogError("ALPHA IS " + ImagePanel.sliderValue);
            //jcolor.StoreJSON(decalSaveJSON, true, true, true);
            if (!string.IsNullOrEmpty(ImagePanel.Path))
            {
                string relativePath = FileManagerSecure.NormalizePath(ImagePanel.Path);
                decalSaveJSON["Path"] = relativePath;
            }
            return decalSaveJSON;
        }
        public void RestorePanelFromJSON(JSONClass saveJSON)
        {
            if (saveJSON["Alpha"] != null)
                sliderJSF.SetVal(saveJSON["Alpha"].AsFloat);
            if (saveJSON["H"] != null)
            {
                float h = saveJSON["H"].AsFloat;
                float s = saveJSON["S"].AsFloat;
                float v = saveJSON["V"].AsFloat;
                jcolor.SetVal(h, s, v);
            }
            if (saveJSON["Path"] != null)
                RestoreImageFromJSON(saveJSON["Path"]);
            if (!string.IsNullOrEmpty(saveJSON["LinkID"]))
                linkedPanelID = saveJSON["LinkID"];
            if (saveJSON["Scale"] != null)
            {
                TextureScaleJSF.valNoCallback = saveJSON["Scale"].AsFloat;
                TextureRotationJSF.valNoCallback = saveJSON["Rotation"].AsFloat;
                float x = saveJSON["T_CPT-X"].AsFloat;
                float y = saveJSON["T_CPT-Y"].AsFloat;
                float z = saveJSON["T_CPT-Z"].AsFloat;
                float w = saveJSON["T_CPT-W"].AsFloat;
                TextureTranAndCenter = new Vector4(x, y, z, w);
            }
        }
    }
}
//*** SourceCombiner -> original file FakeEnums.cs ***
//lets fake enum since compiler issue
namespace VAM_Decal_Maker
{
    public static class EventEnum
    {
        //Core Panel
        public const string CoreSetupFinished = "Core-SETUP FINISHED";
        public const string CoreTempDecalToPerm = "Core Button:Panel Temp to Perm";
        public const string CoreRemoveTempPanels = "Remove Decals flagged with temp";
        public const string CoreNewCharacterSelected = "New Skin Selected";
        public const string ToggleGenitalCutout = "_toggleGenitalCutout";
        public const string ToggleNippleCutout = "_toggleNippleCutout";
        public const string CoreRestoreFromJSON = "Restore data from json";
        public const string CoreResetAll = "Reset and clear all panels";
        //ImagePanel
        public const string ImagePanelPathChanged = "ImagePanel-PathChange";
        public const string ImagePanelMaterialChanged = "ImagePanel Material Changed";
        public const string ImagePanelNormalSliderChange = "ImagePanel Normal Scale Changed";
        public const string ImagePanelSpecSliderChange = "ImagePanelSpecChanged";
        public const string ImagePanelTextureCleared = "ImagePanelTextureCleared";
        public const string ImagePanelTextureLoaded = "ImagePanelTextureLoaded";
        public const string ImagePanelVideoFrameUpdate = "ImagePanelVideoFrameUpdate";
        public const string ImagePanelVidePrepared = "ImagePanel Vide Prepared";
        public const string ImagePanelImageLoad = "Image selected for loading";
        public const string ImagePanelVideoLoad = "Video selected for loading";
        //DecalPanel
        public const string DecalPanelMaterialChange = "MatChange";
        public const string DecalPanelMove = "DecalPanelMove";
        public const string DecalPanelButtonUP = "DecalPanel-Move-UP";
        public const string DecalPanelButtonDOWN = "DecalPanel-Move-DOWN";
        public const string DecalPanelButtonCLOSE = "DecalPanel Close Button";
        public const string DecalPanelButtonAdd = "DecalPanel-CREATE";
        public const string DecalPanelButtonCOPY = "DecalPanel-Duplicate";
        public const string DecalPanelDELETE = "DecalPanel-DELETE";
        public const string DecalPanelLinkChanged = "DecalPanel-LinkChanged";
        public const string DecalPanelTextureMove = "DecalPanel Texture Move";
        //ManagerPanel
        public const string ManagerPanelSelection = "New Texture Region Selected";
        public const string ManagerPanelRestoreActive = "Restore last active panel";
        public const string ManagerPanelButtonADD = "Add new panel after last panel";
        public const string ManagerPanelButtonCLOSE = "Remove last panel";
        //HeaderPanel
        public const string HeaderPanelSelection = "New Material Region Selected";
        //preview Panel
        //public const string Scale = "Scale";
        //public const string Create = "Create";
        //public const string Delete = "Delete";
        //public const string Sort = "Sort";
    }
    public static class MatSlotEnum
    {
        public const string MainTex = "_MainTex";
        public const string DecalTex = "_DecalTex";
        public const string BumpMap = "_BumpMap";
        public const string SpecTex = "_SpecTex";
        public const string GlossTex = "_GlossTex";
        public static readonly List<string> Values = new List<string>() { MainTex, DecalTex, BumpMap, SpecTex, GlossTex };
    }
    public static class BodyRegionEnum
    {
        public const string Torso = "torso";
        public const string Face = "face";
        public const string Limbs = "limbs";
        public const string Genitals = "genitals";
        public const string EyeReflection = "relflection";
        public const string EyePupil = "pupil";
        public const string EyeIris = "iris";
        public const string EyeCornea = "cornea";
        public const string EyeSclera = "whites";
        public static readonly List<string> Values = new List<string>() { Torso, Genitals, Face, Limbs, EyeIris, EyeSclera, EyeCornea, EyeReflection, EyePupil };
    }
    public static class ShaderEnum
    {
        public const string DecalShader = "_DecalShader";
        public const string SpecGlossShader = "_SpecGlossShader";
        public const string NormShader = "_NormShader";
        public const string PackedNormShader = "_PackedNormShader";
        public const string DecalShaderUI = "_DecalShaderUI";
        public const string NormalShaderUI = " _NormalShaderUI";
        public const string SpecularShaderUI = " _SpecGlossShaderUI";
        public const string GenitalMakerShaderUI = " _GenitalMakerShaderUI";
        public const string NormShaderRNM = "Normal Shader using RNM";
        public static readonly List<string> Values = new List<string>() { NormShaderRNM, DecalShader,  SpecGlossShader, NormShader, PackedNormShader, DecalShaderUI, NormalShaderUI, SpecularShaderUI, GenitalMakerShaderUI };
    }
}
//*** SourceCombiner -> original file HeaderPanel.cs ***
namespace VAM_Decal_Maker
{
    public class HeaderPanel : UIPanelBase
    {
        public SelectionPanel ActivePanel { get; set; }
        public SelectionPanel SelectionPanelDecal { get; private set; }
        public SelectionPanel SelectionPanelSpec { get; private set; }
        public SelectionPanel SelectionPanelGloss { get; private set; }
        public SelectionPanel SelectionPanelNorm { get; private set; }
        public SelectionPanel SelectionPanelDecalEye { get; private set; }
        public SelectionPanel SelectionPanelSpecEye { get; private set; }
        public SelectionPanel SelectionPanelGlossEye { get; private set; }
        public SelectionPanel SelectionPanelNormEye { get; private set; }
        public MyButton decalButton { get; private set; }
        public MyButton specButton { get; private set; }
        public MyButton glossButton { get; private set; }
        public MyButton normButton { get; private set; }
        public MyButton eyedecalButton { get; private set; }
        public MyButton eyespecButton { get; private set; }
        public MyButton eyeglossButton { get; private set; }
        public MyButton eyenormButton { get; private set; }
        public MyButton eyesButton { get; private set; }
        public Dictionary<string, SelectionPanel> selectionPanels { get; private set; }
        private List<MyButton> buttons;
        //events from Core
        private void CorePanelEvent(object o, PanelEventArgs e)
        {
            switch (e.EventName)
            {
                case EventEnum.HeaderPanelSelection:
                    UpdateSelection(o);
                    break;
                //once setup is finished set Decal as active panel
                case EventEnum.CoreSetupFinished:
                    RaiseCoreEvent(decalButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelDecal));
                    break;
            }
        }
        private void UpdateSelection(object o)
        {
            if (o.GetType() != typeof(MyButton))
                return;
            foreach (MyButton button in buttons)
            {
                if (button == (MyButton)o)
                {
                    button.Selected(true);
                }
                else
                {
                    button.Selected(false);
                }
            }
        }
        public HeaderPanel(Decal_Maker DM) : base(DM, 50)
        {
            //Image i = spacerLeft.gameObject.AddComponent<Image>();
            //i.material = new Material(Shader.Find("UI/Default-Overlay"));
            //i.material.color = Color.green;
            gameObject.transform.SetParent(spacerLeft.transform, false);
            //center panel in UI
            gameObject.transform.localPosition += new Vector3(270, 10, 0);
            //basePanel
            CreatePanelBackground(1050, 70, new Color(.5f, .5f, .5f, 1));
            SetLayout(200, 50);
            SelectionPanelDecal = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.DecalTex,
                IsNormalMap = false,
                linear = false,
                PanelName = MaterialSlot
            };
            SelectionPanelSpec = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.SpecTex,
                IsNormalMap = false,
                linear = true,
                PanelName = MaterialSlot
            };
            SelectionPanelGloss = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.GlossTex,
                IsNormalMap = false,
                linear = true,
                PanelName = MaterialSlot
            };
            SelectionPanelNorm = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.BumpMap,
                IsNormalMap = true,
                linear = true,
                PanelName = MaterialSlot
            };
            //EYES
            SelectionPanelDecalEye = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.DecalTex,
                IsNormalMap = false,
                linear = false,
                PanelName = MaterialSlot
            };
            SelectionPanelSpecEye = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.SpecTex,
                IsNormalMap = false,
                linear = true,
                PanelName = MaterialSlot
            };
            SelectionPanelGlossEye = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.GlossTex,
                IsNormalMap = false,
                linear = true,
                PanelName = MaterialSlot
            };
            SelectionPanelNormEye = new SelectionPanel(1050, 300, new Color(1, 1, 1, 1f), DM)
            {
                MaterialSlot = MatSlotEnum.BumpMap,
                IsNormalMap = true,
                linear = true,
                PanelName = MaterialSlot
            };
            decalButton = new MyButton("Decal", new Color(1, 0.3f, 0.4f), transform);
            decalButton.button.onClick.AddListener(() => RaiseCoreEvent(decalButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelDecal)));
            specButton = new MyButton("Specular", new Color(0.95f, 0.25f, 0.91f), transform);
            specButton.button.onClick.AddListener(() => RaiseCoreEvent(specButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelSpec)));
            glossButton = new MyButton("Gloss", new Color(0.2f, .98f, 0.2f), transform);
            glossButton.button.onClick.AddListener(() => RaiseCoreEvent(glossButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelGloss)));
            normButton = new MyButton("Normal", new Color(0.2f, 0.9f, .9f), transform);
            normButton.button.onClick.AddListener(() => RaiseCoreEvent(normButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelNorm)));
            eyedecalButton = new MyButton("EyeDecal", new Color(1, 0.3f, 0.4f), transform);
            eyedecalButton.button.onClick.AddListener(() => RaiseCoreEvent(decalButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelDecalEye)));
            eyedecalButton.gameObject.SetActive(false);
            eyespecButton = new MyButton("EyeSpecular", new Color(0.95f, 0.25f, 0.91f), transform);
            eyespecButton.button.onClick.AddListener(() => RaiseCoreEvent(specButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelSpecEye)));
            eyespecButton.gameObject.SetActive(false);
            eyeglossButton = new MyButton("EyeGloss", new Color(0.2f, .98f, 0.2f), transform);
            eyeglossButton.button.onClick.AddListener(() => RaiseCoreEvent(glossButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelGlossEye)));
            eyeglossButton.gameObject.SetActive(false);
            eyenormButton = new MyButton("EyeNormal", new Color(0.2f, 0.9f, .9f), transform);
            eyenormButton.button.onClick.AddListener(() => RaiseCoreEvent(normButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelNormEye)));
            eyenormButton.gameObject.SetActive(false);
            buttons = new List<MyButton>() { decalButton, specButton, glossButton, normButton, eyedecalButton, eyeglossButton, eyenormButton, eyespecButton };
            eyesButton = new MyButton("Eyes Toggle", new Color(0.2f, 0.8f, .6f), transform);
            bool eyesActive = false;
            eyesButton.button.onClick.AddListener(() =>
            {
                foreach (MyButton button in buttons)
                {
                    button.gameObject.SetActive(!button.gameObject.activeSelf);
                }
                eyesActive = !eyesActive;
                if (eyesActive)
                {
                    RaiseCoreEvent(eyedecalButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelDecalEye));
                }
                else
                {
                    RaiseCoreEvent(decalButton, new PanelEventArgs(EventEnum.HeaderPanelSelection, SelectionPanelDecal));
                }
            });
            //now finalize panels
            SelectionPanelDecal.CreateManagerPanels();
            SelectionPanelSpec.CreateManagerPanels();
            SelectionPanelGloss.CreateManagerPanels();
            SelectionPanelNorm.CreateManagerPanels();
            SelectionPanelDecal.PanelName = "Decal";
            SelectionPanelSpec.PanelName = "Specular";
            SelectionPanelGloss.PanelName = "Gloss";
            SelectionPanelNorm.PanelName = "Normal";
            SelectionPanelDecalEye.CreateManagerEyePanels();
            SelectionPanelSpecEye.CreateManagerEyePanels();
            SelectionPanelGlossEye.CreateManagerEyePanels();
            SelectionPanelNormEye.CreateManagerEyePanels();
            ActivePanel = SelectionPanelDecal;
            selectionPanels = new Dictionary<string, SelectionPanel> { { "Decal", SelectionPanelDecal }, { "Specular", SelectionPanelSpec }, { "Gloss", SelectionPanelGloss }, { "Normal", SelectionPanelNorm } };
            DM.CoreEvent += CorePanelEvent;
        }
    }
}
//*** SourceCombiner -> original file ImagePanel.cs ***
namespace VAM_Decal_Maker
{
    public class ImagePanel : ImagePanelBase
    {
        public bool ImageLoading { get; private set; }
        public string Path { get; set; }
        //isolate image from direct access since imagepanel sometimes modifies the image shader or image so use imagePanels properties not the image's
        public Color color { get; private set; } = Color.white;
        public Texture mainTexture { get { return base.material.mainTexture; } set { base.material.mainTexture = value; } }
        public RectTransform rectTransform { get { return image.GetComponent<RectTransform>(); } }
        private GameObject video;
        public VideoPlayer videoPlayer { get; private set; }
        //lazy load/create since it wont be used a lot of times
        private RenderTexture _videoTexture;
        private RenderTexture videoTexture
        {
            get
            {
                if (_videoTexture == null)
                {
                    if (linear)
                        _videoTexture = new RenderTexture(4096, 4096, 0, RenderTextureFormat.ARGB32, RenderTextureReadWrite.Linear);
                    else
                        _videoTexture = new RenderTexture(4096, 4096, 0, RenderTextureFormat.ARGB32, RenderTextureReadWrite.sRGB);
                    _videoTexture.Create();
                }
                return _videoTexture;
            }
        }
        public event EventHandler<PanelEventArgs> ImagePanelUpdate;
        private void OnImagePanelChange(PanelEventArgs e)
        {
            if (ImagePanelUpdate != null)
            {
                //store a ref to this imagepanel
                e.ImagePanel = this;
                ImagePanelUpdate(this, e);
            }
        }
        public ImagePanel(Decal_Maker DM, Color? color = null, string TextureSlot = null, string MaterialSlot = null, bool IsNormalMap = false, bool linear = false) : base(DM, TextureSlot, MaterialSlot, IsNormalMap, linear)
        {
            base.TextureSlot = TextureSlot;
            base.MaterialSlot = MaterialSlot;
            base.IsNormalMap = IsNormalMap;
            base.linear = linear;
            //don't parent video player to object that activates/inactivates or it stops
            video = new GameObject();
            videoPlayer = video.AddComponent<VideoPlayer>();
            videoPlayer.playOnAwake = false;
            videoPlayer.renderMode = VideoRenderMode.RenderTexture;
            videoPlayer.frameReady += FrameUpdateEvent;
            videoPlayer.prepareCompleted += VideoPreparedEvent;
            videoPlayer.sendFrameReadyEvents = true;
            videoPlayer.isLooping = true;
            //image = gameObject.AddComponent<Image>();
            // image.material = new Material(Shader.Find("UI/Default-Overlay"));
            SetMaterialColor(color ?? new Color(1, 1, 1, 1f), true);
            RectTransform imageRect = image.rectTransform;
            imageRect.sizeDelta = new Vector2(300, 300);
            //Button = gameObject.AddComponent<Button>();
            Button.onClick.AddListener(() =>
            {
                OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelPathChanged));
            });
        }
        public void SetNormalScale(float value, bool sendEvent)
        {
            material.SetFloat("_NormalScale", value);
            //stupid but makes the UI texture update
            image.enabled = false;
            image.enabled = true;
            UpdateMaterialState(sendEvent);
           // OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelNormalSliderChange, material));
        }
        public void SetSpecularScale(float value, bool sendEvent)
        {
            material.SetFloat("_Smoothness", value);
            image.enabled = false;
            image.enabled = true;
            UpdateMaterialState(sendEvent);
            //OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelSpecSliderChange, material));
        }
        public override void OnDestroy()
        {
            videoPlayer.frameReady -= FrameUpdateEvent;
            videoPlayer.prepareCompleted -= VideoPreparedEvent;
            //the ones on MainPanel are references to VAM skin.
            GameObject.Destroy(material);
            if (mainTexture != null)
            {
                ImageLoaderThreaded.singleton.DeregisterTextureUse((Texture2D)mainTexture);
                GameObject.Destroy(mainTexture);
                //Resources.UnloadAsset(mainTexture);
            }
            GameObject.Destroy(video);
            GameObject.Destroy(videoPlayer);
            GameObject.Destroy(videoTexture);
            base.OnDestroy();
        }
        public void SetMaterialColor(Color color, bool sendEvent)
        {
            this.color = color;
            //The Mask object causes a modified material to be returned so it is no longer rendering the texture that you are updating with the "material" property.
            image.materialForRendering.SetColor("_Color", color);
            //update unmasked material as well
            image.material.SetColor("_Color", color);
            UpdateMaterialState(sendEvent);
        }
        public void UpdateMaterialState(bool sendEvent)
        {
            if (sendEvent)
                OnImagePanelChange(new PanelEventArgs(EventEnum.DecalPanelMaterialChange, color));
        }
        public void HideTexture()
        {
            material.SetColor("_Color", Color.white);
            //UnityEngine.Object.Destroy(image.material);
            //image.material = new Material(Shader.Find("UI/Default-Overlay"));
            OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelTextureCleared, material));
        }
        //Use existing texture
        public override void ApplyTexture(Texture2D texture)
        {
            // Material material = new Material(Shader.Find("UI/Default-Overlay"));
            material.SetTexture("_MainTex", texture);
            //UnityEngine.Object.Destroy(image.material);
            ////Resources.UnloadAsset(image.material);
            image.SetMaterialDirty();
            //image.material = material;
            //image.material.mainTexture = texture;
            OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelMaterialChanged, this.material));
        }
        //load texture from disk
        private void OnImageLoaded(ImageLoaderThreaded.QueuedImage qi)
        {
            if (qi != null)
            {
                ImageLoaderThreaded.singleton.RegisterTextureUse(qi.tex);
                if (mainTexture != null)
                {
                    ImageLoaderThreaded.singleton.DeregisterTextureUse((Texture2D)mainTexture);
                }
                mainTexture = qi.tex;
                //prevent texture from tiling when scaled
                mainTexture.wrapMode = TextureWrapMode.Clamp;
                image.SetMaterialDirty();
                //UpdateMaterialState();
                Path = qi.imgPath;
                ImageLoading = false;
                OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelTextureLoaded, material));
            }
        }
        //Old VAM version does not give access to load texture so use VAM image loading routine instead
        //Newer can use FileManagementSecure.FileManagerSecure or loadTexture
        //Wil call OnImageLoad once finished
        //
        //public Action<VideoPlayer> videoCallback;
        //public videoCallback videoCallback1 { get; set; }
        public void LoadResourceFile(string filePath)
        {
            if (videoPlayer.isPrepared)
                videoPlayer.Stop();
            string ext = PathHelper.GetExtension(filePath);
            if (PathHelper.videoExtensions.Contains(ext, StringComparer.OrdinalIgnoreCase))
            {
                OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelVideoLoad));
                LoadVideo(filePath);
            }
            else if (PathHelper.imageExtensions.Contains(ext, StringComparer.OrdinalIgnoreCase))
            {
                OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelImageLoad));
                LoadPNG(filePath);
            }
            else
            {
                SuperController.LogError("Decal Maker LoadResourceFile: Extension not recognized");
            }
        }
        private void LoadPNG(string filePath)
        {
            ImageLoaderThreaded.QueuedImage queuedImage = new ImageLoaderThreaded.QueuedImage();
            queuedImage.imgPath = filePath;
            queuedImage.forceReload = false;
            queuedImage.createMipMaps = false;
            queuedImage.isNormalMap = IsNormalMap;
            queuedImage.isThumbnail = false;
            queuedImage.linear = linear;
            queuedImage.createAlphaFromGrayscale = false;
            queuedImage.compress = false;//!queuedImage.isNormalMap;
            if (!IsNormalMap)
            {
                queuedImage.compress = true;
            }
            queuedImage.callback = new ImageLoaderThreaded.ImageLoaderCallback(OnImageLoaded); // = new ImageLoaderThreaded.ImageLoaderCallback(OnImageLoaded);
            //start image load
            ImageLoaderThreaded.singleton.QueueImage(queuedImage);
            ImageLoading = true;
        }
        private void LoadVideo(string filePath)
        {
            videoPlayer.targetTexture = videoTexture;
            videoPlayer.url = filePath;
            videoPlayer.Prepare();
            //create a maintexture as are target if it doesn't exist OR is wrong size for graphics copy 4096,4096
            if (mainTexture == null || mainTexture.width != 4096 || mainTexture.height != 4096)
            {
                mainTexture = new Texture2D(videoTexture.width, videoTexture.height, TextureFormat.ARGB32, false, linear);
                image.material = material;
                image.enabled = false;
                image.enabled = true;
            }
            videoPlayer.Play();
        }
        //caled when video is ready to play
        private void VideoPreparedEvent(VideoPlayer source)
        {
            OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelVidePrepared, source));
        }
        //called on each frame so trigger a dirty event
        private void FrameUpdateEvent(VideoPlayer source, long frameIdx)
        {
            Graphics.CopyTexture(videoTexture, mainTexture);
            OnImagePanelChange(new PanelEventArgs(EventEnum.ImagePanelVideoFrameUpdate, source));
        }
    }
}
//*** SourceCombiner -> original file ImagePanelBase.cs ***
namespace VAM_Decal_Maker
{
    public class ImagePanelBase : PanelBase
    {
        protected Image image;
        public Button Button { get; private set; }
        public Material material
        {
            get { return image.material; }
            set { image.material = value; }
        }
        public ImagePanelBase(Decal_Maker DM, string TextureSlot, string MaterialSlot, bool IsNormalMap, bool linear) : base(DM)
        {
            this.MaterialSlot = MaterialSlot;
            this.TextureSlot = TextureSlot;
            this.IsNormalMap = IsNormalMap;
            this.linear = linear;
            image = gameObject.AddComponent<Image>();
            if (IsNormalMap)
            {
                material = new Material(DM.GetShader(ShaderEnum.NormalShaderUI));
            }
            //else if (linear)
            //{
            //Shader not not implemented yet
            //    material = new Material(DM._customUISpecGlossShader);
            //}
            else
            {   //new Material(Graphic.defaultGraphicMaterial.shader);
                material = new Material(Shader.Find("UI/Default-Overlay"));
            }
            Button = gameObject.AddComponent<Button>();
        }
        public override void OnDestroy()
        {
            base.OnDestroy();
            GameObject.Destroy(image);
            //Resources.UnloadAsset(image);
            GameObject.Destroy(material);
            //Resources.UnloadAsset(material);
        }
        public virtual void ApplyTexture(Texture2D texture)
        {
            image.material.mainTexture = texture;
        }
    }
}
//*** SourceCombiner -> original file ManagerPanel.cs ***
namespace VAM_Decal_Maker
{
    //Controls the display of Decal Level UI elements
    //split off from ImagePanel to focus class
    public class ManagerPanel : UIPanelBase
    {
        public ImagePanelBase ImagePanel { get; set; }
        public new GameObject gameObject { get { return ImagePanel.gameObject; } }
        private Button Button { get { return ImagePanel.Button; } }
        //controls the addition and removal of all panels
        public List<DecalPanel> DecalPanels { get; set; } = new List<DecalPanel>();
        private List<DecalPanel> TempDecalPanels { get; set; } = new List<DecalPanel>();
        private static Random rd = new Random();
        public RenderPanelBase renderPanel { get; set; }
        private RenderPanelNormal _converter_renderPanel;
        public RenderPanelNormal converter_renderPanel
        {
            get
            {
                if (_converter_renderPanel == null)
                { _converter_renderPanel = new RenderPanelNormal(DM, MaterialSlot, TextureSlot); }
                return _converter_renderPanel;
            }
        }
        private int retries = 0;
        private JSONStorableUrl addNewDecalPanel;
        public override void OnDestroy()
        {
            DM.DeregisterUrl(addNewDecalPanel);
            base.OnDestroy();
        }
        //events from decal/image panel
        private void DecalPanelEvent(object o, PanelEventArgs e)
        {
            //is this event for us. Has a decal panel and it is one of ours
            if (e.DecalPanel == null || !DecalPanels.Contains(e.DecalPanel))
            {
                return;
            }
            int currentIndex;
            int newIndex;
            if (renderPanel != null)
            {
                switch (e.EventName)
                {
                    case EventEnum.DecalPanelMaterialChange:
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.DecalPanelMove:
                        RepositionDecalPanel(e.DecalPanel, e.NewPosition);
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.DecalPanelButtonUP:
                        currentIndex = e.DecalPanel.gameObject.transform.GetSiblingIndex();
                        newIndex = currentIndex - 1;
                        if (newIndex >= 0)
                        {
                            RepositionDecalPanel(e.DecalPanel, newIndex);
                            renderPanel.IsDirty = true;
                        }
                        break;
                    case EventEnum.DecalPanelButtonDOWN:
                        currentIndex = e.DecalPanel.gameObject.transform.GetSiblingIndex();
                        newIndex = currentIndex + 1;
                        if (newIndex < DecalPanels.Count)
                        {
                            RepositionDecalPanel(e.DecalPanel, newIndex);
                            renderPanel.IsDirty = true;
                        }
                        break;
                    case EventEnum.DecalPanelButtonCLOSE:
                        RemoveDecalPanel(e.DecalPanel);
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.DecalPanelButtonAdd:
                        DecalPanel d = AddDecalPanels();
                        currentIndex = e.DecalPanel.gameObject.transform.GetSiblingIndex();
                        newIndex = currentIndex + 1;
                        RepositionDecalPanel(d, newIndex);
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.DecalPanelButtonCOPY:
                        d = AddDecalPanels();
                        //Copy Function to copy source data to target
                        e.DecalPanel.CopyDataToTargetPanel(d);
                        currentIndex = e.DecalPanel.gameObject.transform.GetSiblingIndex();
                        newIndex = currentIndex + 1;
                        RepositionDecalPanel(d, newIndex);
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.ImagePanelPathChanged:
                        // JSONStorableUrl lastImageDir = DM.GetUrlJSONParam("LastImageDir");
                        //lastImageDir.FileBrowse();
                        string lastDir = DM.GetUrlParamValue("LastImageDir");
                        List<ShortCut> shortCuts = FileManagerSecure.GetShortCutsForDirectory("Custom/Atom/Person/Textures/", false, true, true, false);
                        SuperController.singleton.GetMediaPathDialog(new FileBrowserCallback(e.DecalPanel.BrowserCallBack), "", lastDir, true, true, false, null, false, shortCuts);
                        break;
                    case EventEnum.ImagePanelNormalSliderChange:
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.ImagePanelVideoFrameUpdate:
                        //Debug.Log(DateTime.Now +  " video event ");
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.ImagePanelTextureLoaded: 
                        renderPanel.IsDirty = true;
                        break;
                    case EventEnum.DecalPanelTextureMove:
                        //renderPanel.IsDirty = true;
                        break;
                    default:
                        //SuperController.LogError("OPERATION NOT HANDLED " + e.EventName);
                        renderPanel.IsDirty = true;
                        break;
                }
            }
        }
        //events from Core/General events
        public void CoreEvent(object o, PanelEventArgs e)
        {
            //SuperController.LogError("CORE EVENT " + e.EventName + " " + o.ToString());
            switch (e.EventName)
            {   //set Torso as active slot
                case EventEnum.CoreSetupFinished:
                    if (TextureSlot == BodyRegionEnum.Torso)
                    {
                        //set the torso UI of each as selection on each UI
                        RaiseCoreEvent(this, new PanelEventArgs(EventEnum.ManagerPanelSelection, this));
                    }
                    break;
                case EventEnum.CoreTempDecalToPerm:
                    ResetTempDecalPanelTable();
                    break;
                case EventEnum.CoreNewCharacterSelected:
                    if (e.Bool)
                    {
                        //DeregisterDAZCharacterTextureControl();
                        //RegisterDAZCharacterTextureControl();
                    }
                    UpdateSkinImage();
                    renderPanel.IsDirty = true;
                    break;
                case EventEnum.ToggleGenitalCutout:
                    if (MaterialSlot == MatSlotEnum.DecalTex && TextureSlot == BodyRegionEnum.Genitals)
                    {
                        renderPanel.IsDirty = true;
                    }
                    break;
                case EventEnum.ToggleNippleCutout:
                    if (MaterialSlot == MatSlotEnum.DecalTex && TextureSlot == BodyRegionEnum.Torso)
                    {
                        renderPanel.IsDirty = true;
                    }
                    break;
                case EventEnum.ManagerPanelButtonADD:
                    if (e.ManagerPanel == this)
                    {
                        AddDecalPanels();
                        //UI may not have the tab selected so sync
                        UpdateSelection(e);
                    }
                    break;
                case EventEnum.ManagerPanelButtonCLOSE:
                    if (e.ManagerPanel == this)
                        RemoveDecalPanel();
                    break;
                case EventEnum.ManagerPanelSelection:
                    UpdateSelection(e);
                    break;
                case EventEnum.CoreRestoreFromJSON:
                    if (e.materialSlot == MaterialSlot && e.bodyRegion == TextureSlot)
                    {
                        //SuperController.LogError("EventEnum.CoreRestoreFromJSON:" + MaterialSlot + TextureSlot + " " + DecalPanels.Count);
                        RestorePanelFromJSON(e.saveJSON, e.Bool);
                    }
                    break;
                case EventEnum.CoreResetAll:
                    int count = DecalPanels.Count;
                    for (int i = 0; i < count; i++)
                    {
                        RemoveDecalPanel();
                    }
                    break;
                case EventEnum.CoreRemoveTempPanels:
                    DM.StartCoroutine(RemoveTempDecalPanels());
                    break;
                case EventEnum.DecalPanelMaterialChange:
                    //if linked when this panel changes update all links
                    bool isUpdated = false;
                    foreach (DecalPanel d in DecalPanels)
                    {
                        //if not event from us, our ID is set and we are same ID
                        if (d == e.DecalPanel)
                            continue;//skip to next
                        if (string.IsNullOrEmpty(d.linkedPanelID))
                            continue;
                        if (d.linkedPanelID == "*")
                            continue;
                        if (d.linkedPanelID != e.DecalPanel.linkedPanelID)
                            continue;
                        //we need to copy data and not trigger a EventEnum.DecalPanelColor event to avoid loop
                        //SuperController.LogError("Copy Data from panel" + e.DecalPanel.RandomName + " To panel " + d.RandomName);
                        d.CopyDataFromTargetPanel(e.DecalPanel, false);
                        isUpdated = true;
                    }
                    if (isUpdated)
                    {
                        //SuperController.LogError(DateTime.Now+" " +e.DecalPanel.RandomName + "render is dirty"); 
                        renderPanel.IsDirty = true;
                    }
                    break;
                case EventEnum.DecalPanelTextureMove:
                    foreach (DecalPanel d in DecalPanels)
                    {
                        if (d == e.DecalPanel)
                        {
                           renderPanel.IsDirty = true;
                        }
                    }
                    break;
            }
        }
        private void UpdateSelection(PanelEventArgs e)
        {
            //we only want to update on the 4 UI buttons of this material slot.
            if (e.ManagerPanel == this)
            {
                Button.image.color = Color.white;
                ActivateWindow(true);
            }
            else if (e.ManagerPanel.MaterialSlot == MaterialSlot)
            {
                Button.image.color = Color.grey;
                ActivateWindow(false);
            }
        }
        private void UpdateSkinImage()
        {
            //System.Diagnostics.Stopwatch watch = System.Diagnostics.Stopwatch.StartNew();
            Texture2D temp = null;
            int id = TextureIndex.GetFirstTextureID(TextureSlot, DM._isMale);
            if (MaterialSlot == MatSlotEnum.DecalTex)
            {
                temp = DM.GetOriginalGPUTexture(id, MatSlotEnum.MainTex);
            }
            else if (MaterialSlot == MatSlotEnum.BumpMap)
            {
                //convert any packed normals to rgb format
                //The renderPanel Texture is being used by the actal renderer. Use a second renderpanel for normal conversion
                int[] ids = TextureIndex.GetTextureIDs(TextureSlot, DM._isMale);
                temp = converter_renderPanel.ConvertNormal(ids);
                DM.StoreNormalDisplayTex(MaterialSlot, TextureSlot, temp);
            }
            else
            {
                temp = DM.GetOriginalGPUTexture(id, MaterialSlot);
            }
            ImagePanel.ApplyTexture(temp);
            //watch.Stop();
            //SuperController.LogError(MaterialSlot + " " +TextureSlot + " Skin panel took " + watch.ElapsedMilliseconds);
        }
        public ManagerPanel(Decal_Maker DM = null, Color? color = null, string TextureSlot = null, string MaterialSlot = null, bool IsNormalMap = false, bool linear = false) : base(DM, 300)
        {
            base.MaterialSlot = MaterialSlot;
            base.TextureSlot = TextureSlot;
            base.IsNormalMap = IsNormalMap;
            base.linear = linear;
            DM.GetJSONDelegate += SavePanelToJSON;
            PanelName = MaterialSlot + " " + TextureSlot;
            ImagePanel = new ImagePanelBase(DM, TextureSlot, MaterialSlot, IsNormalMap, linear);
            TextPanel textPanel = new TextPanel(gameObject, new Vector3(0, -35, 0), "Region Text")
            {
                text = TextureSlot.ToUpper() ?? "",
                alignment = TextAnchor.LowerCenter,
                color = new Color(0.196078435f, 0.196078435f, 0.196078435f, 1f),
                fontStyle = FontStyle.Bold,
                fontSize = 30,
                anchorMin = Vector2.zero,
                anchorMax = Vector2.one,
                sizeDelta = Vector2.zero,
            };
            SetLayout(1050, spacerLeft.height);
            RemoveDecalPanel();
            ActivateWindow(false);
            switch (MaterialSlot)
            {
                case MatSlotEnum.DecalTex:
                    renderPanel = new RenderPanelDecal(DM, MaterialSlot, TextureSlot);
                    break;
                case MatSlotEnum.BumpMap:
                    renderPanel = new RenderPanelNormal(DM, MaterialSlot, TextureSlot);
                    break;
                case MatSlotEnum.SpecTex:
                case MatSlotEnum.GlossTex:
                    renderPanel = new RenderPanelSpecGloss(DM, MaterialSlot, TextureSlot);
                    break;
            }
            renderPanel.DecalPanels = DecalPanels;
            //register two listner functions one for general and one to monitor child panels
            RegisterForCoreEvents(DecalPanelEvent);
            RegisterForCoreEvents(CoreEvent);
            //reuse button from image panel
            Button.onClick.AddListener(
                () =>
                {
                    RaiseCoreEvent(this, new PanelEventArgs(EventEnum.ManagerPanelSelection, this));
                }
            );
            string s = string.Format("Add new {0}{1}", TextureSlot, MaterialSlot);
            addNewDecalPanel = new JSONStorableUrl(s, string.Empty, AddNewPanelAction);
            DM.RegisterUrl(addNewDecalPanel);
            addNewDecalPanel.isStorable = false;
        }
        private void AddNewPanelAction(string path)
        {
            if (FileManagerSecure.FileExists(path))
            {
                DecalPanel d = AddDecalPanels();
                d.RestoreImageFromJSON(path);
            }
        }
        public override void SetLayout(float width, float height)
        {
            GridLayoutGroup glg = spacerLeft.gameObject.AddComponent<GridLayoutGroup>();
            glg.cellSize = new Vector2(width, height);
            glg.constraint = GridLayoutGroup.Constraint.FixedColumnCount;
            glg.constraintCount = 1;
            glg.spacing = new Vector2(0, 0);
        }
        private DecalPanel RestorePanelFromJSON(JSONClass saveJSON, bool IsTemp = false)
        {
            string RandomName;
            if (saveJSON["RandomName"] != null)
            {
                RandomName = saveJSON["RandomName"];
                if (DecalPanels.Any(x => x.RandomName == RandomName))
                    RandomName = GeneratePanelName();
            }
            else
            {
                RandomName = GeneratePanelName();
            }
            DecalPanel d = AddDecalPanels(IsTemp, RandomName);
            d.RestorePanelFromJSON(saveJSON);
            d.gameObject.transform.localPosition += new Vector3(270, 0, 0);
            renderPanel.IsDirty = true;
            return d;
        }
        private JSONArray SavePanelToJSON(string MaterialSlot, string TextureSlot)
        {
            if (MaterialSlot == this.MaterialSlot && TextureSlot == this.TextureSlot)
            {
                JSONArray Panel = new JSONArray();
                foreach (DecalPanel d in DecalPanels)
                {
                    JSONClass tempDecal = d.Save();
                    Panel.Add("", tempDecal);
                }
                return Panel;
            }
            return null;
        }
        public DecalPanel AddDecalPanels(bool temp = false, string RandomName = null)
        {
            if (RandomName == null)
                RandomName = GeneratePanelName();
            DecalPanel d = new DecalPanel(spacerLeft.transform, 1050, 300, UnityEngine.Random.ColorHSV(0f, 1f, 1f, 1f, 0.5f, 1f), DM, RandomName, MaterialSlot, TextureSlot, IsNormalMap, linear);
            d.gameObject.transform.localPosition += new Vector3(270, 0, 0);
            IncreaseDecalPanel(d, temp);
            renderPanel.IsDirty = true;
            return d;
        }
        private void IncreaseDecalPanel(DecalPanel d, bool temp = false)
        {
            DecalPanels.Add(d);
            ResizeSpacers(300);
            if (temp)
            {
                TempDecalPanels.Add(d);
            }
        }
        //unique ID to use for jsonparam
        private string GeneratePanelName()
        {
            DateTime date = DateTime.Now;
            int y = date.Year - 2000;
            int m = date.Month;
            int d = date.Day;
            string randombit = CreateString(3);
            string newName = string.Format("{0}{1}{2}{3}", y, m, d, randombit);
            //regenerate until unique or 100 tries
            if (retries > 100)
            {
                return "FAIL";
            }
            else if (DecalPanels.Any(x => x.RandomName == newName))
            {
                retries++;
                return GeneratePanelName();
            }
            return newName;
        }
        //https://stackoverflow.com/a/4616745 
        internal static string CreateString(int stringLength)
        {
            const string allowedChars = "ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
            char[] chars = new char[stringLength];
            for (int i = 0; i < stringLength; i++)
            {
                chars[i] = allowedChars[rd.Next(0, allowedChars.Length)];
            }
            return new string(chars);
        }
        private void RemoveDecalPanel()
        {
            if (DecalPanels.Any())
            {
                //get last entry and remove
                DecalPanel d = DecalPanels[DecalPanels.Count - 1];
                RemoveDecalPanel(d);
            }
        }
        public bool RemoveDecalPanel(DecalPanel d)
        {
            bool removed = DecalPanels.Remove(d);
            if (removed)
            {
                d.OnDestroy();
                GameObject.Destroy(d.gameObject);
                ResizeSpacers(-300);
                renderPanel.IsDirty = true;
            }
            return true;
        }
        public IEnumerator RemoveTempDecalPanels()
        {
            foreach (DecalPanel d in TempDecalPanels.ToList())
            {
                yield return new WaitUntil(() => RemoveDecalPanel(d));
                RemoveDecalPanel(d);
            }
        }
        public void ResetTempDecalPanelTable()
        {
            TempDecalPanels = new List<DecalPanel>();
        }
        private void RepositionDecalPanel(DecalPanel d, int index)
        {
            d.gameObject.transform.SetSiblingIndex(index);
            DecalPanels.Remove(d);
            DecalPanels.Insert(index, d);
        }
        private void ResizeSpacers(float value)
        {
            spacerLeft.height += value;
            spacerRight.height += value;
        }
        public void ActivateWindow(bool value)
        {
            spacerLeft.gameObject.SetActive(value);
            spacerRight.gameObject.SetActive(value);
        }
    }
}
//*** SourceCombiner -> original file MyButton.cs ***
namespace VAM_Decal_Maker
{
    public class MyButton
    {
        public GameObject gameObject = new GameObject("MyButton");
        public Transform transform { get { return gameObject.transform; } }
        public Image image { get; set; }
        public ButtonExt button { get; set; }
        public Text buttonText { get; set; }
        private Color normalColor;
        private Color unselectedColor;
        public void Selected(bool value)
        {
            if (value)
            {
                ColorBlock colors = button.colors;
                colors.normalColor = normalColor;
                button.colors = colors;
            }
            else
            {
                ColorBlock colors = button.colors;
                colors.normalColor = unselectedColor;
                button.colors = colors;
            }
        }
        public MyButton(string label, Color color, Transform parent, Vector3 offset, Vector2 sizeDelta)
        {
            CreateButton(label, color, parent, offset, sizeDelta);
        }
        public MyButton(string label, Color color, Transform parent)
        {
            CreateButton(label, color, parent, Vector3.zero, new Vector2(160, 30));
        }
        private void CreateButton(string label, Color color, Transform parent, Vector3 offset, Vector2 sizeDelta)
        {
            if (parent != null)
            {
                transform.SetParent(parent, false);
                transform.localPosition = offset;
            }
            RectTransform rt = gameObject.AddComponent<RectTransform>();
            rt.sizeDelta = sizeDelta;
            GameObject textGO = new GameObject("Text");
            textGO.transform.SetParent(gameObject.transform, false);
            RectTransform tRT = textGO.AddComponent<RectTransform>();
            tRT.anchorMin = Vector2.zero;
            tRT.anchorMax = Vector2.one;
            tRT.sizeDelta = Vector2.zero;
            buttonText = textGO.AddComponent<Text>();
            buttonText.raycastTarget = false;
            buttonText.text = label;
            buttonText.alignment = TextAnchor.MiddleCenter;
            buttonText.color = Color.black;
            buttonText.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            buttonText.fontSize = 30;
            image = gameObject.AddComponent<Image>();
            image.material = new Material(Shader.Find("UI/Default-Overlay"));
            //image.color = color ?? Color.green;
            normalColor = color;// ?? new Color(0.6f, 0, 0, 1);
            button = gameObject.AddComponent<ButtonExt>();
            //convert color to HSV to allow easier lighten/darken operation
            float H, S, V;
            Color.RGBToHSV(normalColor, out H, out S, out V);
            ColorBlock colors = button.colors;
            colors.highlightedColor = Color.HSVToRGB(H, S, V * 1.4f);
            colors.normalColor = normalColor;
            colors.pressedColor = normalColor;// Color.HSVToRGB(H, S, V * 1.2f);
            unselectedColor = Color.HSVToRGB(H, S, V * 0.5f);
            button.colors = colors;
            Selected(false);
        }
        public void SetIcon(Texture2D icon)
        {
            image.material.mainTexture = icon;
        }
    }
    //small extension to button class making overides get access to actions
    public class ButtonExt : Button
    {
        public Action OnPointerDownAction;
        public Action OnPointerUpAction;
        public override void OnPointerDown(PointerEventData eventData)
        {
            OnPointerDownAction?.Invoke();
            base.OnPointerUp(eventData);
        }
        public override void OnPointerUp(PointerEventData eventData)
        {
            OnPointerUpAction?.Invoke();
            base.OnPointerUp(eventData);
        }
    }
}
//*** SourceCombiner -> original file PanelBase.cs ***
namespace VAM_Decal_Maker
{
    public class PanelBase
    {
        public GameObject gameObject = new GameObject("Panel");
        public Transform transform { get { return gameObject.transform; } }
        protected Decal_Maker DM;
        public string PanelName { get; set; }
        public string TextureSlot { get; set; }
        public string MaterialSlot { get; set; }
        public bool IsNormalMap { get; set; }
        public bool linear { get; set; }
        protected Image panelImage;
        private List<JSONStorableParam> RegisteredParams = new List<JSONStorableParam>();
        private List<JSONStorableAction> RegisteredActions = new List<JSONStorableAction>();
        protected void RegisterForCoreEvents(EventHandler<PanelEventArgs> eventHandler)
        {
            DM.CoreEvent += eventHandler;
        }
        protected void UnRegisterForCoreEvents(EventHandler<PanelEventArgs> eventHandler)
        {
            DM.CoreEvent -= eventHandler;
        }
        protected virtual void RaiseCoreEvent(object o, PanelEventArgs e)
        {
            DM.OnCoreChange(o, e);
        }
        protected void RegisterAction(JSONStorableAction action)
        {
            RegisteredActions.Add(action);
            DM.RegisterAction(action);
        }
        protected void DeregisterAction(JSONStorableAction action)
        {
            RegisteredActions.Remove(action);
            DM.DeregisterAction(action);
        }
        protected void RegisterColor(JSONStorableColor value, bool isStorable)
        {
            value.isStorable = isStorable;
            value.isRestorable = false;
            RegisteredParams.Add(value);
            DM.RegisterColor(value);
        }
        protected void DeregisterColor(JSONStorableColor value)
        {
            RegisteredParams.Remove(value);
            DM.DeregisterColor(value);
        }
        protected void RegisterFloat(JSONStorableFloat value, bool isStorable)
        {
            value.isStorable = isStorable;
            value.isRestorable = isStorable;
            RegisteredParams.Add(value);
            DM.RegisterFloat(value);
        }
        protected void DeregisterFloat(JSONStorableFloat value)
        {
            RegisteredParams.Remove(value);
            DM.DeregisterFloat(value);
        }
        protected void RegisterUrl(JSONStorableUrl value, bool isStorable)
        {
            value.isStorable = isStorable;
            value.isRestorable = isStorable;
            RegisteredParams.Add(value);
            DM.RegisterUrl(value);
        }
        protected void DeregisterUrl(JSONStorableUrl value)
        {
            RegisteredParams.Remove(value);
            DM.DeregisterUrl(value);
        }
        public PanelBase(Decal_Maker DM)
        {
            this.DM = DM;
            DM.OnUpDateAction += Update;
            DM.OnDestroyAction += OnDestroy;
        }
        protected virtual void Update()
        {
            //if (Input.GetKeyDown("space"))
            //{
            //    SuperController.LogError("PRESSSSSSSS  ");
            //}
        }
        public virtual void OnDestroy()
        {
            DM.OnUpDateAction -= Update;
            DM.OnUpDateAction -= OnDestroy;
            if (panelImage != null)
            {
                GameObject.Destroy(panelImage);
            }
            foreach (JSONStorableParam value in RegisteredParams)
            {
                if (value.GetType() == typeof(JSONStorableFloat))
                {
                    DM.DeregisterFloat((JSONStorableFloat)value);
                }
                else if (value.GetType() == typeof(JSONStorableUrl))
                {
                    DM.DeregisterUrl((JSONStorableUrl)value);
                }
                else if (value.GetType() == typeof(JSONStorableColor))
                {
                    DM.DeregisterColor((JSONStorableColor)value);
                }
            }
            foreach (JSONStorableAction action in RegisteredActions)
            {
                DM.DeregisterAction(action);
            }
        }
        public Image CreatePanelBackground(float width, float height, Color? color)
        {
            //basePanel
            panelImage = gameObject.AddComponent<Image>();
            panelImage.material = new Material(Shader.Find("UI/Default-Overlay"));
            panelImage.color = color ?? new Color(.9f, .9f, .9f, 1);
            panelImage.rectTransform.sizeDelta = new Vector2(width, height);
            return panelImage;
        }
        public virtual void SetLayout(float width, float height)
        {
            GridLayoutGroup glg = gameObject.GetComponent<GridLayoutGroup>();
            if (glg == null)
            {
                glg = gameObject.AddComponent<GridLayoutGroup>();
            }
            glg.cellSize = new Vector2(width, height);
            glg.constraint = GridLayoutGroup.Constraint.FixedRowCount;
            glg.constraintCount = 1;
            glg.padding = new RectOffset(10, 10, 10, 10);
            glg.spacing = new Vector2(10, 0);
        }
    }
}
//*** SourceCombiner -> original file PanelEventArgs.cs ***
namespace VAM_Decal_Maker
{
    //class that creates a custom eventArgs to be sent with events
    public class PanelEventArgs : EventArgs
    {
        public PanelEventArgs(string EventName)
        {
            this.EventName = EventName;
        }
        public PanelEventArgs(string EventName, bool Value)
        {
            this.EventName = EventName;
            this.Bool = Value;
        }
        public PanelEventArgs(string EventName, string Path)
        {
            this.EventName = EventName;
            this.Path = Path;
        }
        public PanelEventArgs(string EventName, Material Material)
        {
            this.EventName = EventName;
            this.Material = Material;
        }
        public PanelEventArgs(string EventName, Color Color)
        {
            this.EventName = EventName;
            this.Color = Color;
        }
        public PanelEventArgs(string EventName, DecalPanel DecalPanel)
        {
            this.EventName = EventName;
            this.DecalPanel = DecalPanel;
        }
        public PanelEventArgs(string EventName, ManagerPanel ManagerPanel)
        {
            this.EventName = EventName;
            this.ManagerPanel = ManagerPanel;
        }
        public PanelEventArgs(string EventName, SelectionPanel selectionPanel)
        {
            this.EventName = EventName;
            this.SelectionPanel = selectionPanel;
        }
        public PanelEventArgs(string EventName, JSONClass saveJSON)
        {
            this.EventName = EventName;
            this.saveJSON = saveJSON;
        }
        public PanelEventArgs(string EventName, VideoPlayer videoPlayer)
        {
            this.EventName = EventName;
            this.videoPlayer = videoPlayer;
        }
        public string materialSlot { get; set; }
        public string bodyRegion { get; set; }
        public JSONClass saveJSON { get; set; }
        public string EventName { get; }
        public Material Material { get; }
        public Color Color { get; }
        public DecalPanel DecalPanel { get; set; }
        public ImagePanel ImagePanel { get; set; }
        public ManagerPanel ManagerPanel { get; set; }
        public HeaderPanel HeaderPanel { get; set; }
        public SelectionPanel SelectionPanel { get; set; }
        public int NewPosition { get; set; }
        public bool Bool { get; set; }
        public string Path { get; set; }
        public VideoPlayer videoPlayer { get; set; }
    }
}
//*** SourceCombiner -> original file PathHelper.cs ***
namespace VAM_Decal_Maker
{
    //from system PATH since it is unusable in VAM
    public static class PathHelper
    {
        //unity compatible file list https://docs.unity3d.com/Manual/BuiltInImporters.html
        public static List<string> imageExtensions = new List<string>() { ".jpg", ".jpeg", ".tif", "tiff", ".tga", ".gif", ".png", ".psd", ".bmp", ".iff", ".pict", ".pic", ".pct", ".exr", ".hdr" };
        public static List<string> videoExtensions = new List<string>() { ".asf", ".avi", ".dv", ".m4v", ".mov", ".mp4", ".mpg", ".mpeg", ".ogv", ".vp8", ".webm", ".wmv" };
        private static char[] PathSeparatorChars = new char[] { '/', '\\' };
        //MacGruber Discord 03/26/2020
        //Get directory path where the plugin is located. Based on Alazi's & VAMDeluxe's method.
        public static string GetPluginPath(MVRScript self)
        {
            string id = self.name.Substring(0, self.name.IndexOf('_'));
            string filename = self.manager.GetJSON()["plugins"][id].Value;
            return filename.Substring(0, filename.LastIndexOfAny(PathSeparatorChars));
        }
        // Get path prefix of the package that contains our plugin.
        public static string GetPackagePath(MVRScript self)
        {
            string filename = GetPluginPath(self);
            int idx = filename.IndexOf(":/");
            if (idx >= 0)
                return filename.Substring(0, idx + 2);
            else
                return string.Empty;
        }
        //By: VAMDeluxe Discord
        public static List<string> GetFilesAtPathRecursive(string path, string pattern)
        {
            List<string> combined = new List<string>();
            string[] files = FileManagerSecure.GetFiles(path, pattern);
            string[] directories = FileManagerSecure.GetDirectories(path);
            List<ShortCut> shortCuts = FileManagerSecure.GetShortCutsForDirectory(path);
            files.ToList().ForEach(file =>
            {
                combined.Add(file);
            });
            directories.ToList().ForEach(directory =>
            {
                combined.AddRange(GetFilesAtPathRecursive(directory, pattern));
            });
            return combined;
        }
        //from C# PATH
        public static string GetFileName(string path)
        {
            int num = path.LastIndexOfAny(PathSeparatorChars);
            if (num >= 0)
            {
                return path.Substring(num + 1);
            }
            return path;
        }
        public static string GetExtension(string path)
        {
            if (path == null)
            {
                return null;
            }
            int num = findExtension(path);
            if (num > -1 && num < path.Length - 1)
            {
                return path.Substring(num);
            }
            return string.Empty;
        }
        private static int findExtension(string path)
        {
            if (path != null)
            {
                int num = path.LastIndexOf('.');
                int num2 = path.LastIndexOfAny(PathSeparatorChars);
                if (num > num2)
                {
                    return num;
                }
            }
            return -1;
        }
        /// <summary>Gets an array containing the characters that are not allowed in path names.</summary>
        /// <returns>An array containing the characters that are not allowed in path names.</returns>
        public static char[] GetInvalidPathChars = new char[]
        {
            '"',
            '<',
            '>',
            '|',
            '\0',
            '\u0001',
            '\u0002',
            '\u0003',
            '\u0004',
            '\u0005',
            '\u0006',
            '\a',
            '\b',
            '\t',
            '\n',
            '\v',
            '\f',
            '\r',
            '\u000e',
            '\u000f',
            '\u0010',
            '\u0011',
            '\u0012',
            '\u0013',
            '\u0014',
            '\u0015',
            '\u0016',
            '\u0017',
            '\u0018',
            '\u0019',
            '\u001a',
            '\u001b',
            '\u001c',
            '\u001d',
            '\u001e',
            '\u001f'
        };
        public static string GetFileNameWithoutExtension(string path)
        {
            return ChangeExtension(GetFileName(path), null);
        }
        public static string ChangeExtension(string path, string extension)
        {
            if (path == null)
            {
                return null;
            }
            if (path.IndexOfAny(GetInvalidPathChars) != -1)
            {
                throw new ArgumentException("Illegal characters in path.");
            }
            int num = findExtension(path);
            if (extension == null)
            {
                return (num >= 0) ? path.Substring(0, num) : path;
            }
            if (extension.Length == 0)
            {
                return (num >= 0) ? path.Substring(0, num + 1) : (path + '.');
            }
            if (path.Length != 0)
            {
                if (extension.Length > 0 && extension[0] != '.')
                {
                    extension = "." + extension;
                }
            }
            else
            {
                extension = string.Empty;
            }
            if (num < 0)
            {
                return path + extension;
            }
            if (num > 0)
            {
                string str = path.Substring(0, num);
                return str + extension;
            }
            return extension;
        }
    }
}
//*** SourceCombiner -> original file PopupPanel.cs ***
namespace VAM_Decal_Maker
{
    public class PopupPanel
    {
        private List<MyButton> buttons = new List<MyButton>();
        public GameObject gameObject = new GameObject("Panel");
        public Transform transform { get { return gameObject.transform; } }
        protected Decal_Maker DM;
        private MyButton UpButton;
        private MyButton DownButton;
        private MyButton PrimaryButton;
        private GameObject selectionPanel;
        private JSONStorableStringChooser jSONStorableStringChooser;
        public PopupPanel(Decal_Maker DM, JSONStorableStringChooser jSONStorableStringChooser)
        {
            this.DM = DM;
            this.jSONStorableStringChooser = jSONStorableStringChooser;
            jSONStorableStringChooser.setCallbackFunction += SelectionMadeJSSC;
            Image baseImage = gameObject.AddComponent<Image>();
            baseImage.material = new Material(Shader.Find("UI/Default-Overlay"));
            baseImage.color = Color.cyan;
            baseImage.rectTransform.sizeDelta = new Vector2(60, 60);
            Vector2 buttonSize = new Vector2(60, 60);
            PrimaryButton = new MyButton("", new Color(0.8f, 0.8f, 0.8f), gameObject.transform, new Vector3(0, 0, 0), buttonSize);
            PrimaryButton.buttonText.fontSize = 40;
            PrimaryButton.buttonText.text = jSONStorableStringChooser.val;
            selectionPanel = new GameObject();
            selectionPanel.transform.SetParent(gameObject.transform, false);
            Image selectionImage = selectionPanel.AddComponent<Image>();
            selectionImage.material = new Material(Shader.Find("UI/Default-Overlay"));
            selectionImage.color = Color.red;
            selectionImage.rectTransform.sizeDelta = new Vector2(60, 200);
            GridLayoutGroup glg = selectionPanel.AddComponent<GridLayoutGroup>();
            glg.cellSize = buttonSize;
            glg.constraint = GridLayoutGroup.Constraint.FixedColumnCount;
            glg.constraintCount = 1;
            glg.spacing = Vector2.zero;
            UpButton = new MyButton("", new Color(0.9f, 0.6f, 0.1f), selectionPanel.transform, new Vector3(0, 0, 0), buttonSize);
            Texture2D UpIcon = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/Up-Icon.jpg");
            UpButton.SetIcon(UpIcon);
            UpButton.button.onClick.AddListener(() =>
            {
                int count = 0;
                foreach (MyButton b in buttons)
                {
                    b.buttonText.text = jSONStorableStringChooser.choices[count];
                    count++;
                }
            });
            for (int i = 0; i <= 5; i++)
            {
                MyButton button = new MyButton("", new Color(0.9f, 0.9f, 0.9f), selectionPanel.transform, new Vector3(0, 0, 0), buttonSize);
                button.buttonText.text = jSONStorableStringChooser.choices[i];
                buttons.Add(button);
                button.button.onClick.AddListener(() => { SelectionMadeButton(button.buttonText.text); });
            }
            DownButton = new MyButton("", new Color(0.1f, 0.6f, 0.8f), selectionPanel.transform, new Vector3(0, 0, 0), buttonSize);
            Texture2D DownIcon = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/Down-Icon.jpg");
            DownButton.SetIcon(DownIcon);
            DownButton.button.onClick.AddListener(() => { int count = 6; foreach (MyButton b in buttons) { b.buttonText.text = jSONStorableStringChooser.choices[count]; count++; } });
            selectionPanel.gameObject.SetActive(false);
            PrimaryButton.button.onClick.AddListener(() => { selectionPanel.gameObject.SetActive(!selectionPanel.gameObject.activeSelf); });
        }
        private void SelectionMadeButton(string selection)
        {
            PrimaryButton.buttonText.text = selection;
            selectionPanel.gameObject.SetActive(false);
            jSONStorableStringChooser.valNoCallback = selection;
        }
        private void SelectionMadeJSSC(string selection)
        {
            PrimaryButton.buttonText.text = selection;
            selectionPanel.gameObject.SetActive(false);
        }
    }
}
//*** SourceCombiner -> original file PrefabCollection.cs ***
namespace VAM_Decal_Maker
{
    public class PrefabCollection
    {
        public string Author { get; private set; }
        public string ItemType { get; private set; }
        public string ItemName { get; private set; }
        public string Path { get; private set; }
        public string Package { get; private set; }
        public string ImagePath { get; private set; }
        public PrefabCollection(string path, string package = null)
        {
            string fileName = GetFileName(path);
            Path = path;
            Package = package;
            //*?)(\.dsgn)?  lowest posible after underscore and optionally match dsgn since early versions had that in the name
            MatchCollection mc = Regex.Matches(fileName, @"^(.*)_(.*)_(.*?)(\.dsgn)?.DecalMakerPreset.json");
            foreach (Match m in mc)
            {
                Author = m.Groups[1].Value;
                ItemType = m.Groups[2].Value;
                ItemName = m.Groups[3].Value;
                string imagePath = path.Replace(".json", ".jpg");
                if (FileManagerSecure.FileExists(imagePath))
                {
                    ImagePath = imagePath;
                }
            }
        }
        //from C# PATH
        private char[] sep = new char[] { '/', '\\' };
        private string GetFileName(string path)
        {
            int num = path.LastIndexOfAny(sep);
            if (num >= 0)
            {
                return path.Substring(num + 1);
            }
            return path;
        }
    }
}
//*** SourceCombiner -> original file PrefabCreator.cs ***
namespace VAM_Decal_Maker
{
    public class PrefabCreator
    {
        private Decal_Maker DM;
        private bool waitingOnScreenShot;
        public PrefabCreator(Decal_Maker DM)
        {
            this.DM = DM;
        }
        private JSONClass Recursive(JSONClass jc)
        {
            if (jc == null)
                return null;
            if (jc.HasKey("Path"))
                return jc;
            JSONNode[] a = jc.Childs.Where(x => x.GetType() == typeof(JSONArray)).ToArray();
            foreach (JSONArray a2 in a)
            {
                foreach (JSONNode v in a2)
                {
                    if (v.GetType() == typeof(JSONClass))
                        return Recursive((JSONClass)v);
                }
            }
            JSONNode[] c = jc.Childs.Where(x => x.GetType() == typeof(JSONClass)).ToArray();
            foreach (JSONClass c2 in c)
            {
                return Recursive(c2);
            }
            return null;
        }
        public void Start(string prefabExample, string sourceImages)
        {
            string dirPath = FileManagerSecure.GetDirectoryName(prefabExample);
            string[] allFiles = FileManagerSecure.GetFiles(sourceImages);
            List<string> imageFiles = allFiles.Where(x => x.EndsWith("png", StringComparison.OrdinalIgnoreCase) || x.EndsWith("jpg", StringComparison.OrdinalIgnoreCase)).ToList();
            List<string> prefabs = new List<string>();
            foreach (string imageFile in imageFiles)
            {
                JSONClass jc = SuperController.singleton.LoadJSON(prefabExample) as JSONClass;
                JSONClass o = Recursive(jc);
                if (o != null)
                {
                    //SuperController.LogError("FOUND KEY REC " + o["Path"] + " " +  imageFile);
                    o["Path"] = imageFile;
                    string imageName = GetFileNameWithoutExtension(imageFile);
                    imageName = imageName.Replace("_", "");
                    string newFile = string.Format("{0}/{1}.DecalMakerPreset.json", dirPath, imageName);
                    SuperController.singleton.SaveJSON(jc, newFile);
                    prefabs.Add(newFile);
                }
            }
            DM.StartCoroutine(ScreenShotTask(prefabs));
        }
        private IEnumerator ScreenShotTask(List<string> prefabs)
        {
            foreach (string prefab in prefabs)
            {
                DM.PresetLoad(prefab, true);
                //wait for clothing and any texture loads are finished
                yield return new WaitWhile(() => SuperController.singleton.loadingIcon.gameObject.activeSelf);
                yield return new WaitForSeconds(1);
                SuperController.singleton.DoSaveScreenshot(prefab, ScreenShotCall);
                waitingOnScreenShot = true;
                SuperController.singleton.SetLeftSelect();
                yield return new WaitWhile(() => waitingOnScreenShot);
                DM.CallAction("ClearAll");
                yield return new WaitForSeconds(1);
            }
            yield break;
        }
        private void ScreenShotCall(string text)
        {
            waitingOnScreenShot = false;
        }
    }
}
//*** SourceCombiner -> original file PrefabPanel.cs ***
namespace VAM_Decal_Maker
{
    public class PrefabPanel : UIPanelBase
    {
        private ImagePanel ImagePanel;
        private Dictionary<string, List<PrefabCollection>> prefabFiles = new Dictionary<string, List<PrefabCollection>>();
        private string selectedType;
        private string selectedItem;
        private List<string> author = new List<string>();
        private List<string> prefabTypes = new List<string>();
        private List<string> prefabNames = new List<string>();
        private JSONStorableStringChooser jsc;
        private JSONStorableStringChooser jsc2;
        public PrefabPanel(Decal_Maker DM) : base(DM)
        {
            ImagePanel = new ImagePanel(DM);
            ImagePanel.gameObject.transform.SetParent(spacerRight.transform, false);
            RectTransform imageRect = ImagePanel.rectTransform;
            imageRect.sizeDelta = new Vector2(500, 500);
            GridLayoutGroup glg = spacerLeft.gameObject.AddComponent<GridLayoutGroup>();
            glg.cellSize = new Vector2(500, 100);
            glg.constraint = GridLayoutGroup.Constraint.FixedColumnCount;
            glg.constraintCount = 1;
            glg.padding = new RectOffset(10, 10, 10, 10);
            glg.spacing = new Vector2(10, 0);
            jsc = new JSONStorableStringChooser("name", prefabTypes, "", "Choose Type");
            UIDynamicPopup dynamicPopupType = UIWidgets.CreatePopup(DM, spacerLeft.gameObject.transform, jsc);
            RefreshPrefabCollection();
            jsc2 = new JSONStorableStringChooser("name", prefabNames, "", "Choose Prefab");
            UIDynamicPopup dynamicPopupItem = UIWidgets.CreatePopup(DM, spacerLeft.gameObject.transform, jsc2);
            dynamicPopupType.popup.onValueChangeUnityEvent.AddListener(TypeValueChanges);
            dynamicPopupItem.popup.onValueChangeUnityEvent.AddListener(ItemValueChanged);
            ImagePanel.Button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.CoreTempDecalToPerm));
            });
            GameObject imageObject = new GameObject("text background");
            imageObject.transform.SetParent(ImagePanel.gameObject.transform, false);
            Image ima = imageObject.AddComponent<Image>();
            ima.color = new Color(.8f, .8f, .8f);
            RectTransform imRT = imageObject.GetComponent<RectTransform>();
            imageObject.transform.localPosition += new Vector3(0, -5f, 0);
            imRT.anchorMin = Vector2.zero;
            imRT.anchorMax = new Vector2(1, 0.1f);
            imRT.sizeDelta = Vector2.zero;
            //Button Text
            GameObject textObject = new GameObject("button text");
            textObject.transform.SetParent(imageObject.gameObject.transform, false);
            //used to prevent text object from blocking clicks
            CanvasGroup cg = textObject.AddComponent<CanvasGroup>();
            cg.blocksRaycasts = false;
            Text panelText = textObject.AddComponent<Text>();
            panelText.alignment = TextAnchor.MiddleCenter;
            panelText.color = Color.black;
            panelText.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            panelText.fontSize = 30;
            panelText.fontStyle = FontStyle.Bold;
            panelText.text = "Make current Prefab Permanent";
            RectTransform ptRT = panelText.GetComponent<RectTransform>();
            ptRT.anchorMin = new Vector2(0, .02f);
            ptRT.anchorMax = Vector2.one;
            ptRT.sizeDelta = Vector2.zero;
        }
        private void TypeValueChanges(string value)
        {
            selectedType = value;
            RefreshPrefabCollection();
            List<PrefabCollection> a = prefabFiles[value];
            prefabNames = a.Select(x => x.ItemName).ToList();
            prefabNames.Insert(0, "");
            jsc2.SetVal("");
            ResetItem();
            jsc2.choices = prefabNames;
        }
        private void ItemValueChanged(string value)
        {
            selectedItem = value;
            RaiseCoreEvent(this, new PanelEventArgs(EventEnum.CoreRemoveTempPanels));
            if (value == "")
            {
                ResetItem();
            }
            else
            {
                PrefabCollection c = prefabFiles[selectedType].Where(x => x.ItemName == value).FirstOrDefault();
                //reset decals added from other prefabs
                if (c.ImagePath != null)
                    ImagePanel.LoadResourceFile(c.ImagePath);
                DM.PresetLoad(c.Path, true, c.Package);
            }
        }
        private void ResetItem()
        {
            RaiseCoreEvent(this, new PanelEventArgs(EventEnum.CoreRemoveTempPanels));
            ImagePanel.HideTexture();
            DM.PresetLoad(GetPackagePath(DM) + "Custom/Scripts/Chokaphi/VAM_Decal_Maker/Icons/EMPTY.dsgn.DecalMakerPreset.json", true);
        }
        public void RefreshPrefabCollection()
        {
            string path = FileManagerSecure.NormalizePath("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Presets/PreFabs");
            if (!FileManagerSecure.DirectoryExists(path))
                return;
            prefabFiles = new Dictionary<string, List<PrefabCollection>>();
            List<string> files = GetFilesAtPathRecursive(path, null);
            List<ShortCut> shortCuts = FileManagerSecure.GetShortCutsForDirectory(path);
            foreach (ShortCut s in shortCuts)
            {
                if (s.isLatest && s.package != "" && s.package != "AddonPackages Flattened" && s.package != "AddonPackages Filtered")
                {
                    List<string> temp = GetFilesAtPathRecursive(s.path, null);
                    foreach (string SCFile in temp)
                    {
                        PrefabCollection pc = new PrefabCollection(SCFile, s.package);
                        if (pc.ItemType != null)
                        {
                            if (prefabFiles.ContainsKey(pc.ItemType))
                            {
                                prefabFiles[pc.ItemType].Add(pc);
                            }
                            else
                            {
                                prefabFiles.Add(pc.ItemType, new List<PrefabCollection>() { pc });
                            }
                        }
                    }
                }
            }
            foreach (string file in files)
            {
                PrefabCollection pc = new PrefabCollection(file);
                if (pc.ItemType != null)
                {
                    if (prefabFiles.ContainsKey(pc.ItemType))
                    {
                        prefabFiles[pc.ItemType].Add(pc);
                    }
                    else
                    {
                        prefabFiles.Add(pc.ItemType, new List<PrefabCollection>() { pc });
                    }
                }
            }
            prefabTypes = prefabFiles.Keys.ToList();
            jsc.choices = prefabTypes;
        }
        public void OnClick()
        {
            bool state = !spacerLeft.gameObject.activeSelf;
            spacerLeft.gameObject.SetActive(state);
            spacerRight.gameObject.SetActive(state);
            RefreshPrefabCollection();
        }
    }
}
//*** SourceCombiner -> original file RenderPanelSpecGloss.cs ***
namespace VAM_Decal_Maker
{
    public class RenderPanelSpecGloss : RenderPanelBase
    {
        private Texture2D _clearTex;
        protected Texture2D clearTex
        {
            get
            {
                if (_clearTex == null)
                {
                    //Debug.Log("Created lazy cleartex" + MaterialSlot + TextureSlot);
                    _clearTex = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Cutout/Clear.png", true);
                }
                return _clearTex;
            }
        }
        protected override Texture2D tempTexture
        {
            get
            {
                if (base.tempTexture == null)
                {
                    //Debug.Log("Created lazy temptex" + MaterialSlot + TextureSlot);
                    base.tempTexture = new Texture2D(4096, 4096, TextureFormat.RGBA32, false, true);
                }
                return base.tempTexture;
            }
        }
        public RenderPanelSpecGloss(Decal_Maker DM, string MaterialSlot, string TextureSlot) : base(DM, MaterialSlot, TextureSlot)
        {
            material = new Material(DM.GetShader(ShaderEnum.SpecGlossShader));
        }
        public override void OnDestroy()
        {
            if (_clearTex != null)
            {
                GameObject.Destroy(_clearTex);
                //Resources.UnloadAsset(_clearTex);
            }
            base.OnDestroy();
        }
        public override IEnumerator ApplyChanges()
        {
            if (DecalPanels.Count == 0)
            {
                ResetGPUTexture(MaterialSlot, TextureSlot);
            }
            else
            {
                int pass = 0;
                int count = 0;
                bool multiRender = false;
                ZeroMaterial();
                //if we have a specular material on Base model use it as spec0
                Texture2D mainTex = DM.GetOriginalGPUTexture(TextureIndex.GetFirstTextureID(TextureSlot, IsMale), MaterialSlot);
                if (mainTex != null)
                {
                    //material.SetVector("_SpecColor" + count, new Vector4(1, 1, 1, 0.5f));
                    material.SetTexture("_SpecTex" + count, mainTex);
                    material.SetFloat("_Smoothness" + count, 1);
                    count = 1;
                }
                foreach (DecalPanel d in DecalPanels)
                {
                    //material.SetVector("_SpecColor" + count, new Vector4(1, 1, 1, 0.5f));
                    material.SetTexture("_SpecTex" + count, d.ImagePanel.mainTexture);
                    material.SetFloat("_Smoothness" + count, d.sliderJSF.val);
                    count++;
                    //we can bake 10 textures per material
                    if (count > 9)
                    {
                        count = 0;
                        if (pass > 0)
                        {
                            yield return GpuCombine(tempTexture, material, true);
                        }
                        else
                        {
                            yield return GpuCombine(clearTex, material, true);
                        }
                        ZeroMaterial();
                        multiRender = true;
                        pass++;
                    }
                }
                if (multiRender)
                {
                    yield return GpuCombine(tempTexture, material, true);
                }
                else
                {
                    yield return GpuCombine(clearTex, material, true);
                }
                //apply textures
                SetGPUTexture(tempTexture, MaterialSlot, TextureSlot);
            }
            //Only un-flag IsDirty if no updates happened while processing.
            if (dirtyTimeStart == dirtyTime)
            {
                IsDirty = false;
            }
            Processing = false;
        }
        protected override void ZeroMaterial()
        {
            for (int i = 0; i < 10; i++)
            {
                //material.SetVector("_SpecColor" + i, new Vector4(1, 1, 1, 0));
                material.SetTexture("_SpecTex" + i, null);
                material.SetFloat("_Smoothness" + i, 0);
            }
        }
    }
}
//*** SourceCombiner -> original file RenderPanelNormal.cs ***
namespace VAM_Decal_Maker
{
    public class RenderPanelNormal : RenderPanelBase
    {
        private Texture2D _normTex;
        private Texture2D normTex
        {
            get
            {
                if (_normTex == null)
                {
                    //Debug.Log("Created lazy normTex" + MaterialSlot + TextureSlot);
                    _normTex = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Cutout/Normal.png", true);
                }
                return _normTex;
            }
        }
        protected override Texture2D tempTexture
        {
            get
            {
                if (base.tempTexture == null)
                {
                    //Debug.Log("Created lazy temptex" + MaterialSlot + TextureSlot);
                    base.tempTexture = new Texture2D(4096, 4096, TextureFormat.RGBA32, false, true);
                }
                return base.tempTexture;
            }
        }
        public RenderPanelNormal(Decal_Maker DM, string MaterialSlot, string TextureSlot) : base(DM, MaterialSlot, TextureSlot)
        {
            material = new Material(DM.GetShader(ShaderEnum.NormShaderRNM));
        }
        public override void OnDestroy()
        {
            if (_normTex != null)
            {
                GameObject.Destroy(_normTex);
                //Resources.UnloadAsset(_normTex);
            }
            base.OnDestroy();
        }
        public override IEnumerator ApplyChanges()
        {
            if (DecalPanels.Count == 0)
            {
                ResetGPUTexture(MaterialSlot, TextureSlot);
            }
            else
            {
                int pass = 0;
                int count = 0;
                ZeroMaterial();
                //if we have a normal material on Base model use it as norm0
                int id = TextureIndex.GetFirstTextureID(TextureSlot, IsMale);
                if (id == 2)
                {   //fuck nostril missing map
                    id = 11;
                }
                Texture2D mainTex = DM.GetOriginalGPUTexture(id, MaterialSlot);
                if (mainTex != null)
                {
                    material.SetTexture("_BumpMap" + count, mainTex);
                    material.SetFloat("_BumpMapBlend" + count, 1);
                    count = 1;
                }
                bool multiRender = false;
                foreach (DecalPanel d in DecalPanels)
                {
                    material.SetFloat("_BumpMapBlend" + count, d.sliderJSF.val);
                    material.SetTexture("_BumpMap" + count, d.ImagePanel.mainTexture);
                    count++;
                    //we can bake 10 textures per material
                    if (count > 9)
                    {
                        count = 0;
                        if (pass > 0)
                        {
                            yield return GpuCombine(tempTexture, material, true);
                        }
                        else
                        {
                            yield return GpuCombine(normTex, material, true);
                        }
                        ZeroMaterial();
                        multiRender = true;
                        pass++;
                    }
                }
                if (multiRender)
                {
                    yield return GpuCombine(tempTexture, material, true);
                }
                else
                {
                    yield return GpuCombine(normTex, material, true);
                }
                SetGPUTexture(tempTexture, MaterialSlot, TextureSlot);
            }
            //Only un-flag IsDirty if no updates happened while processing.
            if (dirtyTimeStart == dirtyTime)
            {
                IsDirty = false;
            }
            Processing = false;
        }
        //recycle material by setting alphas back to 0
        protected override void ZeroMaterial()
        {
            for (int i = 0; i < 10; i++)
            {
                material.SetFloat("_BumpMapBlend" + i, 0);
                material.SetTexture("_BumpMap" + i, null);
            }
        }
    }
}
//*** SourceCombiner -> original file RenderPanelDecal.cs ***
namespace VAM_Decal_Maker
{
    public class RenderPanelDecal : RenderPanelBase
    {
        protected Texture2D _clearTex;
        protected Texture2D clearTex
        {
            get
            {
                if (_clearTex == null)
                {
                    //Debug.Log("Created lazy cleartex" + MaterialSlot + TextureSlot);
                    _clearTex = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Cutout/Clear.png");
                }
                return _clearTex;
            }
        }
        //we toggle between textures to buffer and keep stop image stutter
        //textures will be lazy loaded
        private Texture2D tempTexture1;
        private Texture2D tempTexture2;
        private bool toggle = false;
        protected override Texture2D tempTexture
        {
            get
            {
                if (toggle)
                {
                    if (tempTexture2 == null)
                    {
                        tempTexture2 = new Texture2D(4096, 4096, TextureFormat.RGBA32, false, false);
                        tempTexture2.wrapMode = TextureWrapMode.Clamp;
                    }
                    //Debug.Log("Tex2 returnd");
                    return tempTexture2;
                }
                else
                {
                    if (tempTexture1 == null)
                    {
                        tempTexture1 = new Texture2D(4096, 4096, TextureFormat.RGBA32, false, false);
                        tempTexture1.wrapMode = TextureWrapMode.Clamp;
                    }
                    //Debug.Log("Tex1 returnd");
                    return tempTexture1;
                }
            }
        }
        public RenderPanelDecal(Decal_Maker DM, string MaterialSlot, string TextureSlot) : base(DM, MaterialSlot, TextureSlot)
        {
            material = new Material(DM.GetShader(ShaderEnum.DecalShader));
        }
        public override void OnDestroy()
        {
            if (_clearTex != null)
            {
                GameObject.Destroy(_clearTex);
                //Resources.UnloadAsset(_clearTex);
            }
            base.OnDestroy();
        }
        public override IEnumerator ApplyChanges()
        {
            if (DecalPanels.Count == 0)
            {
                ResetGPUTexture(MaterialSlot, TextureSlot);
            }
            else
            {
                ZeroMaterial();
                //Uses shader to clip part of one texture and applys it to another based on the alpha of a third texture.
                //Used to Apply "Clean" nipples and genital areas after decals have been applied.
                //This Alpha control will be Character UV specific. So Victoria has a diffrent nipple area than Olympia etc..
                if (TextureSlot == BodyRegionEnum.Torso && DM._toggleNippleCutout.val)
                {
                    DM.GetBoolJSONParam("Nipple Cutouts ON");
                    Texture2D alphaTex = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Cutout/" + DM._uvSetName + ".png");
                    material.SetTexture("_Alpha", alphaTex);
                }
                if (TextureSlot == BodyRegionEnum.Genitals && DM._toggleGenitalCutout.val && IsMale == false)
                {
                    Texture2D alphaTex = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Cutout/_FemaleGenitals.png");
                    material.SetTexture("_Alpha", alphaTex);
                }
                int pass = 0;
                int count = 0;
                bool linear = false;
                bool multiRender = false;
                foreach (DecalPanel d in DecalPanels)
                {
                    material.SetVector("_DecalColor" + count, d.ImagePanel.color);
                    material.SetTexture("_DecalTex" + count, d.ImagePanel.mainTexture);
                    material.SetVector("_DecalTrans" + count, d.TextureTranAndCenter);
                    material.SetFloat("_DecalRot" + count, d.TextureRotationJSF.val);
                    material.SetFloat("_DecalScale" + count, d.TextureScaleJSF.val);
                    linear = d.ImagePanel.linear;
                    count++;
                    //we can bake 10 textures per material
                    if (count > 9)
                    {
                        count = 0;
                        if (pass > 0)
                        {
                            yield return GpuCombine(tempTexture, material, linear);
                        }
                        else
                        {
                            yield return GpuCombine(clearTex, material, linear);
                        }
                        ZeroMaterial();
                        multiRender = true;
                        pass++;
                    }
                }
                if (multiRender)
                {
                    yield return GpuCombine(tempTexture, material, linear);
                }
                else
                {
                    yield return GpuCombine(clearTex, material, linear);
                }
                SetGPUTexDelegate(tempTexture, MaterialSlot, TextureSlot);
                toggle = !toggle;
            }
            //Only un-flag IsDirty if no updates happened while processing.
            if (dirtyTimeStart == dirtyTime)
            {
                IsDirty = false;
            }
            Processing = false;
        }
        //recycle material by setting alphas back to 0
        protected override void ZeroMaterial()
        {
            material.SetTexture("_Alpha", null);
            for (int i = 0; i < 10; i++)
            {
                material.SetVector("_DecalColor" + i, Color.clear);
                material.SetTexture("_DecalTex" + i, null);
                material.SetVector("_DecalTrans" + i, new Vector4(0, 0, 0.5f, 0.5f));
                material.SetFloat("_DecalRot" + i, 0);
                material.SetFloat("_DecalScale" + i, 1);
            }
        }
    }
}
//*** SourceCombiner -> original file RenderPanelBase.cs ***
namespace VAM_Decal_Maker
{
    public class RenderPanelBase
    {
        protected Decal_Maker DM;
        protected bool Processing = false;
        protected float dirtyTime = Time.time;
        protected float dirtyTimeStart = Time.time;
        protected Material material;
        protected List<Material> materials = new List<Material>();
        public delegate void SetGPUTextureDelegate(Texture2D tempTex, string MaterialSlot, string TextureSlot);
        public SetGPUTextureDelegate SetGPUTexDelegate;
        public bool IsMale { get { return DM._isMale; } }
        public string TextureSlot { get; protected set; }
        public string MaterialSlot { get; protected set; }
        public List<DecalPanel> DecalPanels { get; set; }
        private bool _isDirty = false;
        public bool IsDirty
        {
            get
            {
                return _isDirty;
            }
            set
            {
                _isDirty = value;
                if (value == true)
                    dirtyTime = Time.time;
            }
        }
        //this is our target texture will alway update referance in all materials it is assigned to 
        protected virtual Texture2D tempTexture { get; set; }
        public RenderPanelBase(Decal_Maker DM, string MaterialSlot, string TextureSlot)
        {
            this.DM = DM;
            DM.OnUpDateAction += Update;
            DM.OnDestroyAction += OnDestroy;
            this.MaterialSlot = MaterialSlot;
            this.TextureSlot = TextureSlot;
            SetGPUTexDelegate = SetGPUTexture;
        }
        public virtual bool GpuCombine(Texture baseTex, Material material, bool linear = false)
        {
            int w = baseTex.width;
            int h = baseTex.height;
            RenderTextureReadWrite renderTexConversion = RenderTextureReadWrite.sRGB;
            if (linear)
            {
                renderTexConversion = RenderTextureReadWrite.Linear;
            }
            RenderTexture tmp = RenderTexture.GetTemporary(w, h, 0, RenderTextureFormat.ARGB32, renderTexConversion);//tmp.antiAliasing = 8;
            //Backup the currently set RenderTexture
            RenderTexture previous = RenderTexture.active;
            Graphics.Blit(baseTex, tmp, material);
            RenderTexture.active = tmp;
            //tempTexture.Apply();
            //Avoids GPU to CPU Copy
            Graphics.CopyTexture(tmp, tempTexture);
            // Reset the active RenderTexture
            RenderTexture.active = previous;
            RenderTexture.ReleaseTemporary(tmp);
            return true;
        }
        public void Update()
        {
            //SuperController.LogError("OnLateUpdate()");
            if (IsDirty)
            {
                //SuperController.LogError("IS DIRTY!" + MaterialSlot + " " + TextureSlot);
                if (!Processing)
                {
                    dirtyTimeStart = dirtyTime;
                    Processing = true;
                    DM.StartCoroutine(ApplyChanges());
                }
            }
        }
        public virtual IEnumerator ApplyChanges()
        {
            yield return null;
        }
        public virtual void OnDestroy()
        {
            DM.OnUpDateAction -= Update;
            DM.OnDestroyAction -= OnDestroy;
            //delete materials and texture references
            foreach (Material mat in materials)
            {
                GameObject.Destroy(mat);
                //Resources.UnloadAsset(mat);
            }
            if (material != null)
            {
                GameObject.Destroy(material);
                //Resources.UnloadAsset(material);
            }
            if (tempTexture != null)
            {
                GameObject.Destroy(tempTexture);
                //Resources.UnloadAsset(tempTexture);
            }
        }
        public Texture2D GetGPUTextures(string MaterialSlot, string TextureSlot)
        {
            int num = TextureIndex.GetFirstTextureID(TextureSlot, IsMale);
            return DM.GetOriginalGPUTexture(num, MaterialSlot);
        }
        protected void SetGPUTexture(Texture2D tempTex, string MaterialSlot, string TextureSlot)
        {
            //apply textures
            foreach (int num in TextureIndex.GetTextureIDs(TextureSlot, IsMale))
            {
                DM._dazSkin.GPUmaterials[num].SetTexture(MaterialSlot, tempTex);
            }
        }
        protected void ResetGPUTexture(string MaterialSlot, string TextureSlot)
        {
            //reset to default textures
            foreach (int num in TextureIndex.GetTextureIDs(TextureSlot, IsMale))
            {
                DM.RestoreGPUMatbyID(num, MaterialSlot);
            }
        }
        //convert normal from packed version for UI button display
        //combine multiple normal into one if the model has region specifics
        public Texture2D ConvertNormal(int[] ids)
        {
            Texture2D _normTex = DM.GetResource("Custom/Scripts/Chokaphi/VAM_Decal_Maker/Cutout/Normal.png", true);
            HashSet<Texture2D> textures = new HashSet<Texture2D>();
            foreach (int id in ids)
            {
                Texture2D tex = DM.GetOriginalGPUTexture(id, MatSlotEnum.BumpMap);
                if (tex != null) 
                {
                    if (!textures.Contains(tex))
                    {
                        textures.Add(tex);
                    }
                }
            }
            if (textures.Count == 0)
            {
                material.SetTexture("_BumpMap0", _normTex);
                material.SetFloat("_BumpMapBlend0", 1);
            }
            else
            {
                int i = 0;
                foreach (Texture2D tex in textures)
                {
                    material.SetTexture("_BumpMap" + i, tex);
                    material.SetFloat("_BumpMapBlend" + i, 1);
                    i++;
                }
            }
            GpuCombine(_normTex, material, true);
            return tempTexture;
        }
        //recycle material by setting alphas back to 0
        protected virtual void ZeroMaterial()
        {
        }
        //From https://support.unity3d.com/hc/en-us/articles/206486626-How-can-I-get-pixels-from-unreadable-textures-
        public Texture2D GetUnreadableTexture(Texture2D texture, bool linear = false)
        {
            RenderTextureReadWrite renderTexConversion = RenderTextureReadWrite.sRGB;
            if (linear)
            {
                renderTexConversion = RenderTextureReadWrite.Linear;
            }
            //LogError("Get Unreadable texture");
            RenderTexture tmp = RenderTexture.GetTemporary(texture.width, texture.height, 0, RenderTextureFormat.ARGB32, renderTexConversion);
            // Blit the pixels on texture to the RenderTexture
            Graphics.Blit(texture, tmp);
            // Backup the currently set RenderTexture
            RenderTexture previous = RenderTexture.active;
            // Set the current RenderTexture to the temporary one we created
            RenderTexture.active = tmp;
            Texture2D newTexture = new Texture2D(texture.width, texture.height, TextureFormat.RGBA32, false, linear);
            newTexture.ReadPixels(new Rect(0, 0, tmp.width, tmp.height), 0, 0);
            newTexture.Apply();
            // Reset the active RenderTexture
            RenderTexture.active = previous;
            // Release the temporary RenderTexture
            RenderTexture.ReleaseTemporary(tmp);
            //LogError("Finish Getting Unreadable texture");
            return newTexture;
        }
        public void ChangeMaterial(Material material)
        {
            this.material = material;
        }
    }
}
//*** SourceCombiner -> original file SelectionPanel.cs ***
namespace VAM_Decal_Maker
{
    public class SelectionPanel : UIPanelBase
    {
        private UIDynamicButton AddButton;
        public UIDynamicButton RemoveButton { get; private set; }
        public Dictionary<string, ManagerPanel> ManagerPanels { get; private set; }
        public ManagerPanel ActivePanel { get; private set; }
        public ManagerPanel TorsoPanel { get; private set; }
        public ManagerPanel GenitalPanel { get; private set; }
        public ManagerPanel FacelPanel { get; private set; }
        public ManagerPanel LimbsPanel { get; private set; }
        public ManagerPanel IrisPanel { get; private set; }
        public ManagerPanel ScleraPanel { get; private set; }
        public ManagerPanel PupilPanel { get; private set; }
        public ManagerPanel CorneaPanel { get; private set; }
        public ManagerPanel ReflectionPanel { get; private set; }
        //events from Core
        private void CorePanelEvent(object o, PanelEventArgs e)
        {
            switch (e.EventName)
            {
                //we have 4 Selection panels each with 4 Manager panels. we only want to update on the 4 UI buttons of this material slot.
                case EventEnum.ManagerPanelSelection:
                    if (e.ManagerPanel.MaterialSlot == MaterialSlot)
                    {
                        ActivePanel = e.ManagerPanel;
                    }
                    break;
                case EventEnum.HeaderPanelSelection:
                    if (e.SelectionPanel == this)
                        ActivateWindow(true);
                    else
                        ActivateWindow(false);
                    break;
                case EventEnum.DecalPanelLinkChanged:
                    if (e.DecalPanel.linkedPanelID == "*")
                        return;
                    if (string.IsNullOrEmpty(e.DecalPanel.linkedPanelID))
                        return;
                    if (e.DecalPanel.MaterialSlot != MaterialSlot)
                        return;
                    //if one panel already has this link id then copy data from it
                    List<ManagerPanel> managers = ManagerPanels.Values.ToList();
                    foreach (ManagerPanel m in managers)
                    {
                        foreach (DecalPanel existing in m.DecalPanels)
                        {
                            if (e.DecalPanel != existing && existing.linkedPanelID == e.DecalPanel.linkedPanelID)
                            {
                                existing.CopyDataToTargetPanel(e.DecalPanel, false);
                                return;
                            }
                        }
                    }
                    break;
            }
        }
        public SelectionPanel(float width, float height, Color? color, Decal_Maker DM) : base(DM, 300)
        {
            //Image i = spacerLeft.gameObject.AddComponent<Image>();
            //i.material = new Material(Shader.Find("UI/Default-Overlay"));
            //i.material.color = Color.blue;
            DM.CoreEvent += CorePanelEvent;
            //create buttons to add/remove panels
            AddButton = DM.CreateButton("Add Image");
            RemoveButton = DM.CreateButton("Remove Image", true);
            gameObject.transform.SetParent(spacerLeft.transform, false);
            gameObject.transform.localPosition += new Vector3(270, 0, 0);
            //basePanel
            CreatePanelBackground(width, height, color);
            SetLayout(250, 250);
            AddButton.button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.ManagerPanelButtonADD, ActivePanel));
            });
            RemoveButton.button.onClick.AddListener(() =>
            {
                RaiseCoreEvent(this, new PanelEventArgs(EventEnum.ManagerPanelButtonCLOSE, ActivePanel));
            });
        }
        public void CreateManagerPanels()
        {
            //Torso panel
            TorsoPanel = new ManagerPanel(DM, null, BodyRegionEnum.Torso, MaterialSlot, IsNormalMap, linear);
            TorsoPanel.gameObject.transform.SetParent(gameObject.transform, false);
            //Genital panel
            GenitalPanel = new ManagerPanel(DM, null, BodyRegionEnum.Genitals, MaterialSlot, IsNormalMap, linear);
            GenitalPanel.gameObject.transform.SetParent(gameObject.transform, false);
            //Face panel
            FacelPanel = new ManagerPanel(DM, null, BodyRegionEnum.Face, MaterialSlot, IsNormalMap, linear);
            FacelPanel.gameObject.transform.SetParent(gameObject.transform, false);
            //Limbs panel
            LimbsPanel = new ManagerPanel(DM, null, BodyRegionEnum.Limbs, MaterialSlot, IsNormalMap, linear);
            LimbsPanel.gameObject.transform.SetParent(gameObject.transform, false);
            ActivePanel = TorsoPanel;
            ManagerPanels = new Dictionary<string, ManagerPanel>() {
                { BodyRegionEnum.Torso, TorsoPanel },
                { BodyRegionEnum.Genitals, GenitalPanel },
                { BodyRegionEnum.Face, FacelPanel },
                { BodyRegionEnum.Limbs, LimbsPanel }
            };
        }
        public void CreateManagerEyePanels()
        {
            SetLayout(200, 200);
            //Torso panel
            IrisPanel = new ManagerPanel(DM, null, BodyRegionEnum.EyeIris, MaterialSlot, IsNormalMap, linear);
            IrisPanel.gameObject.transform.SetParent(gameObject.transform, false);
            //Genital panel
            ScleraPanel = new ManagerPanel(DM, null, BodyRegionEnum.EyeSclera, MaterialSlot, IsNormalMap, linear);
            ScleraPanel.gameObject.transform.SetParent(gameObject.transform, false);
            //Face panel
            PupilPanel = new ManagerPanel(DM, null, BodyRegionEnum.EyePupil, MaterialSlot, IsNormalMap, linear);
            PupilPanel.gameObject.transform.SetParent(gameObject.transform, false);
            //Limbs panel
            ReflectionPanel = new ManagerPanel(DM, null, BodyRegionEnum.EyeReflection, MaterialSlot, IsNormalMap, linear);
            ReflectionPanel.gameObject.transform.SetParent(gameObject.transform, false);
            //cornea
            CorneaPanel = new ManagerPanel(DM, null, BodyRegionEnum.EyeCornea, MaterialSlot, IsNormalMap, linear);
            CorneaPanel.gameObject.transform.SetParent(gameObject.transform, false);
            ManagerPanels = new Dictionary<string, ManagerPanel>()
            {
                { BodyRegionEnum.EyeIris, IrisPanel },
                { BodyRegionEnum.EyeSclera, ScleraPanel },
                { BodyRegionEnum.EyePupil, PupilPanel },
                { BodyRegionEnum.EyeReflection, ReflectionPanel },
                { BodyRegionEnum.EyeCornea, CorneaPanel }
            };
        }
        private void ActivateWindow(bool value)
        {
            spacerLeft.gameObject.SetActive(value);
            spacerRight.gameObject.SetActive(value);
            AddButton.gameObject.SetActive(value);
            RemoveButton.gameObject.SetActive(value);
            ActivePanel.ActivateWindow(value);
        }
    }
}
//*** SourceCombiner -> original file TextPanel.cs ***
namespace VAM_Decal_Maker
{
    //create text gameobjects
    public class TextPanel
    {
        public string text { get { return TextObject.text; } set { TextObject.text = value; } }
        public TextAnchor alignment { get { return TextObject.alignment; } set { TextObject.alignment = value; } }
        public Color color { get { return TextObject.color; } set { TextObject.color = value; } }
        public Font font { get { return TextObject.font; } set { TextObject.font = value; } }
        public FontStyle fontStyle { get { return TextObject.fontStyle; } set { TextObject.fontStyle = value; } }
        public int fontSize { get { return TextObject.fontSize; } set { TextObject.fontSize = value; } }
        public RectTransform rectTransform { get; }
        public Vector2 anchorMin { get { return rectTransform.anchorMin; } set { rectTransform.anchorMin = value; } }
        public Vector2 anchorMax { get { return rectTransform.anchorMax; } set { rectTransform.anchorMax = value; } }
        public Vector2 sizeDelta { get { return rectTransform.sizeDelta; } set { rectTransform.sizeDelta = value; } }
        //used to prevent text object from blocking clicks
        public bool blocksRaycasts { get; set; }
        private GameObject gameObject;
        private CanvasGroup canvasGroup;
        private Text TextObject;
        public TextPanel(GameObject parentObject, Vector3 localPosition, string description = null)
        {
            gameObject = new GameObject(description);
            rectTransform = gameObject.AddComponent<RectTransform>();
            gameObject.transform.SetParent(parentObject.transform, false);
            if (localPosition != null)
                gameObject.transform.localPosition = localPosition;
            TextObject = gameObject.AddComponent<Text>();
            TextObject.raycastTarget = false;
            font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            canvasGroup = gameObject.AddComponent<CanvasGroup>();
            canvasGroup.blocksRaycasts = false;
        }
    }
}
//*** SourceCombiner -> original file UIPanelBase.cs ***
namespace VAM_Decal_Maker
{
    //root class that provide the basic setup and anchor for a window
    //fix this to derive
    public class UIPanelBase : PanelBase
    {
        public UIDynamic spacerLeft { get; private set; }
        protected UIDynamic spacerRight { get; set; }
        public UIPanelBase(Decal_Maker DM, int size = 550) : base(DM)
        {
            //create a UI Spacers to Hold our Panels
            spacerLeft = DM.CreateSpacer(false);
            spacerLeft.height = size;
            spacerRight = DM.CreateSpacer(true);
            spacerRight.height = size;
        }
    }
}
